{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JSON to Variables Setter","text":""},{"location":"#overview","title":"Overview","text":"<p>JSON to Variables Setter (json2vars-setter) is a GitHub Action that parses a JSON file and sets its values as output variables in GitHub Actions workflows. This action streamlines the management of matrix testing configurations and other workflow variables, making your CI/CD processes more maintainable and adaptable.</p> <p>By centralizing your configuration in JSON files, you gain the ability to easily manage and update testing environments across multiple workflows, reducing duplication and maintenance overhead.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>JSON Parsing: Convert JSON files into GitHub Actions output variables for use in your workflows</li> <li>Dynamic Version Management: Automatically update your testing matrix with latest language versions from official sources</li> <li>Version Caching: Cache version information to reduce API calls and improve workflow performance</li> <li>Support for Multiple Languages: Compatible with Python, Ruby, Node.js, Go, and Rust</li> <li>Flexible Configuration: Maintain a single source of truth for your matrix testing environments</li> </ul>"},{"location":"#supported-matrix-components","title":"Supported Matrix Components","text":"Languages Actions Example Test Status"},{"location":"#quick-start","title":"Quick Start","text":"<p>See Basic Usage Examples for details.</p> <pre><code>jobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4.2.2\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n\n  run_tests:\n    needs: set_variables\n    strategy:\n      matrix:\n        os: ${{ fromJson(needs.set_variables.outputs.os) }}\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4.2.2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v5.5.0\n        with:\n          python-version: ${{ matrix.python-version }}\n      # Other steps\n</code></pre>"},{"location":"#components","title":"Components","text":"<p>The action consists of three main components that work together to provide a powerful, flexible solution:</p> <pre><code>graph TD\n    subgraph \"JSON to Variables Setter\"\n        A[JSON to Variables Parser ] --&gt;|Reads| B[Matrix JSON File]\n        A --&gt;|Sets| C[GitHub Actions Outputs]\n\n        D[Dynamic Matrix Updater] --&gt;|Updates| B\n        D --&gt;|Fetches from| E[GitHub API]\n\n        F[Version Cache Manager] --&gt;|Caches| G[Version Information]\n        F --&gt;|Fetches from| E\n        F --&gt;|Generates| B\n    end\n\n    C --&gt;|Used by| I[GitHub Workflows]\n\n    classDef core fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#fff\n    classDef file fill:#ffca28,stroke:#fb8c00,stroke-width:1px,color:#333333\n    classDef output fill:#42a5f5,stroke:#1976d2,stroke-width:1px\n    classDef external fill:#78909c,stroke:#546e7a,stroke-width:1px\n    classDef api fill:#e91e63,stroke:#c2185b,stroke-width:1px,color:#fff\n\n    class A,D,F core\n    class B,G file\n    class C output\n    class I external\n    class E api</code></pre> <ol> <li> <p>JSON to Variables Parser (<code>json_to_github_output.py</code>): Core component that parses JSON and converts it to GitHub Actions outputs. Makes your configuration data accessible throughout your workflow.</p> </li> <li> <p>Dynamic Matrix Updater (<code>update_matrix_dynamic.py</code>): Updates your matrix configuration with the latest or stable language versions. Ensures your CI/CD tests run against current language versions without manual updates.</p> </li> <li> <p>Version Cache Manager (<code>cache_version_info.py</code>): Manages cached version information to optimize API usage. Reduces external API calls by intelligently caching data, improving workflow performance and reliability.</p> </li> </ol>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li>Getting Started - Basic setup and configuration</li> <li>Features - Detailed explanation of all features</li> <li>Usage Examples - Common usage patterns and examples</li> <li>Command Options - Complete reference of all available options</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to my JSON to Variables Setter action! This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Contributing Guide</li> <li>Table of Contents</li> <li>Code of Conduct</li> <li>Getting Started<ul> <li>Development Environment Setup</li> <li>Project Structure</li> </ul> </li> <li>Development Workflow<ul> <li>Creating Issues</li> <li>Making Changes</li> <li>Testing Changes</li> <li>Pull Requests</li> </ul> </li> <li>Coding Guidelines</li> <li>Documentation</li> <li>Core Components Development<ul> <li>JSON to GitHub Output Parser (<code>json_to_github_output.py</code>)</li> <li>Dynamic Matrix Updater (<code>update_matrix_dynamic.py</code>)</li> <li>Version Cache Manager (<code>cache_version_info.py</code>)</li> </ul> </li> <li>Release Process</li> <li>Feedback</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful to all contributors and users. I aim to foster an inclusive and welcoming community.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/7rikazhexde/json2vars-setter.git\ncd json2vars-setter\n</code></pre> </li> <li> <p>Set up a virtual environment:</p> <p>When using the <code>poetry install</code> command, venv is created under the project, so there is no need to manually create a virtual environment (venv).</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> </li> <li> <p>Install dependencies:</p> <p>Option 1: Using Poetry (recommended)</p> <pre><code># Install Poetry if not already installed\npip install poetry\n\n# Install all dependencies\npoetry install\n</code></pre> <p>Option 2: Using pip with requirements files</p> <pre><code># Download requirements-dev.txt from my official Gist\ncurl -O https://gist.githubusercontent.com/7rikazhexde/ee63b33bcb6bb21ac872c5ed41dbf4a6/raw/requirements-dev.txt\n\n# Install development dependencies\npip install -r requirements-dev.txt\n</code></pre> </li> <li> <p>Set up pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre> </li> </ol>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<p>My project is organized as follows:</p> <pre><code>json2vars-setter/\n\u251c\u2500\u2500 .github/           # GitHub specific files (workflows, templates)\n\u251c\u2500\u2500 json2vars_setter/  # Core Python module\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 json_to_github_output.py  # JSON parser component\n\u2502   \u251c\u2500\u2500 update_matrix_dynamic.py  # Dynamic update component\n\u2502   \u251c\u2500\u2500 cache_version_info.py     # Version caching component\n\u2502   \u2514\u2500\u2500 version/       # Version fetching modules\n\u251c\u2500\u2500 tests/             # Test files\n\u251c\u2500\u2500 docs/              # Documentation files\n\u251c\u2500\u2500 action.yml         # Action definition\n\u2514\u2500\u2500 README.md          # Project documentation\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#creating-issues","title":"Creating Issues","text":"<p>Before starting any work, please check existing issues or create a new one to discuss the changes you'd like to make.</p> <ul> <li>For bugs, include steps to reproduce, expected behavior, and actual behavior</li> <li>For features, explain the use case and proposed implementation</li> </ul>"},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a branch:</p> <pre><code>git checkout -b feature-your-feature-name\n</code></pre> <p>Branch naming conventions: Branches must follow the format: <code>&lt;type&gt;-&lt;short-description&gt;</code>. Use the following prefixes based on the purpose of the branch:</p> <ul> <li><code>feature-&lt;description&gt;</code>: For implementing new features (e.g., feature-newlang-supprt).</li> <li><code>bugfix-&lt;description&gt;</code>: For fixing bugs (e.g., bugfix-fetch-python-version-error).</li> <li><code>docs-&lt;description&gt;</code>: For documentation updates (e.g., docs-update-readme).</li> <li><code>refactor-&lt;description&gt;</code>: For code refactoring without functional changes (e.g., refactor-cleanup-utils).</li> </ul> </li> <li> <p>Make your changes:</p> <ul> <li>Follow my coding guidelines</li> <li>Keep changes focused on a single issue/feature</li> </ul> </li> <li> <p>Commit your changes using gitmoji:</p> <pre><code>git commit -m \"\u2728 Add new feature\"\ngit commit -m \"\ud83d\udc1b Fix bug in function X\"\ngit commit -m \"\ud83d\udcdd Update documentation\"\n</code></pre> <p>Recommended gitmoji conventions:</p> <ul> <li>\u2728 (<code>:sparkles:</code>) - New feature</li> <li>\ud83d\udc1b (<code>:bug:</code>) - Bug fix</li> <li>\ud83d\udcdd (<code>:memo:</code>) - Documentation updates</li> <li>\u267b\ufe0f (<code>:recycle:</code>) - Code refactoring</li> <li>\ud83d\ude80 (<code>:rocket:</code>) - Performance improvements</li> <li>\ud83c\udfa8 (<code>:art:</code>) - Code style/structure improvements</li> <li>\ud83e\uddea (<code>:test_tube:</code>) - Add or update tests</li> </ul> <p>Write clear commit messages that explain what changes were made and why.</p> </li> </ol>"},{"location":"contributing/#testing-changes","title":"Testing Changes","text":"<p>About the Testing Policy</p> <ul> <li>Test code should be created using pytest</li> <li>Coverage must be at least 95% (ideally 100%)</li> </ul> <ol> <li> <p>Run unit tests (required):</p> <pre><code># Run basic tests\npytest\n# Or use poetry\npoetry run pytest\n</code></pre> <pre><code># Run verbose coverage tests and create report\npoetry run task testcoverageverbose\n</code></pre> </li> <li> <p>Run linters (required):</p> <pre><code># Run all pre-commit hooks\npre-commit run --all-files\n# Or use poetry to run pre-commit\npoetry run pre-commit run --all-files\n\n# Run specific linters\nruff check json2vars_setter\nruff format json2vars_setter\nmypy json2vars_setter\n</code></pre> </li> <li> <p>Manual testing:</p> <p>Test the action by using it in a test workflow with various configurations.</p> </li> </ol>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li> <p>Push your branch:</p> <pre><code>git push origin feature/your-feature-name\n</code></pre> </li> <li> <p>Create a pull request:</p> <ul> <li>Go to the GitHub repository</li> <li>Click \"Pull requests\" &gt; \"New pull request\"</li> <li>Select your branch</li> <li>Fill in the PR template</li> </ul> </li> <li> <p>Code review:</p> <ul> <li>Respond to feedback and make necessary changes</li> <li>Keep the PR focused on a single issue/feature</li> </ul> </li> </ol>"},{"location":"contributing/#coding-guidelines","title":"Coding Guidelines","text":"<p>Python code:</p> <ul> <li>Follow PEP 8 style guide</li> <li>Use type hints as defined in my mypy configuration</li> <li>Document functions and classes with docstrings<ul> <li>Keep functions focused on a single responsibility</li> </ul> </li> </ul> <p>Linting and Formatting (required)</p> <ul> <li>My project uses pre-commit hooks for consistent code quality</li> <li>All code must pass pre-commit checks before submitting PRs</li> <li>Configuration is defined in <code>.pre-commit-config.yaml</code> and <code>pyproject.toml</code></li> <li>Key linting tools:<ul> <li>Ruff for linting and formatting</li> <li>mypy for static type checking</li> <li>markdownlint for Markdown files</li> <li>actionlint for GitHub Actions workflows</li> <li>shellcheck for shell script checking</li> </ul> </li> <li>You can run all linters at once using: <code>poetry run pre-commit run --all-files</code></li> </ul> <p>Testing (required)</p> <ul> <li>Write unit tests for all new functionality</li> <li>Test edge cases and error conditions</li> <li>Maintain or improve test coverage</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation when making changes that affect user-facing functionality</li> <li>Follow my existing documentation style</li> <li>Include examples for new features</li> <li>Update the README.md if necessary</li> </ul> <p>For MkDocs documentation:</p> <ol> <li> <p>Test documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Build documentation:</p> <pre><code>mkdocs build\n</code></pre> </li> </ol>"},{"location":"contributing/#core-components-development","title":"Core Components Development","text":"<p>When working on my core components, consider the following guidelines:</p>"},{"location":"contributing/#json-to-github-output-parser-json_to_github_outputpy","title":"JSON to GitHub Output Parser (<code>json_to_github_output.py</code>)","text":"<ul> <li>Maintain backward compatibility with existing JSON structures</li> <li>Ensure proper error handling for malformed JSON</li> <li>Optimize for performance with large JSON files</li> </ul>"},{"location":"contributing/#dynamic-matrix-updater-update_matrix_dynamicpy","title":"Dynamic Matrix Updater (<code>update_matrix_dynamic.py</code>)","text":"<ul> <li>Keep the code DRY (Don't Repeat Yourself) when implementing different language fetchers</li> <li>Handle API rate limits gracefully</li> <li>Implement proper error handling and logging</li> </ul>"},{"location":"contributing/#version-cache-manager-cache_version_infopy","title":"Version Cache Manager (<code>cache_version_info.py</code>)","text":"<ul> <li>Ensure thread-safety for file operations</li> <li>Optimize disk I/O and API calls</li> <li>Maintain backward compatibility with existing cache formats</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Version updates and releases are managed through an automated workflow that is only available to repository administrators (currently only me). The process involves:</p> <ol> <li> <p>Version bumping</p> <ul> <li>Handled by the automated workflow that updates the version in relevant files</li> </ul> </li> <li> <p>Creating a release</p> <ul> <li>The workflow automatically creates a tag and a GitHub release</li> <li>Tags follow the format <code>json2vars-setter-vX.Y.Z</code> (e.g., <code>json2vars-setter-v0.2.5</code>)</li> </ul> </li> <li> <p>Documentation deployment</p> <ul> <li>Occurs automatically when changes are merged/pushed to the main branch</li> <li>Handled by a dedicated deployment workflow</li> </ul> </li> </ol>"},{"location":"contributing/#feedback","title":"Feedback","text":"<p>If you have any questions or need help, feel free to:</p> <ul> <li>Open an issue for discussion</li> <li>Contact me directly via X (formerly Twitter) - DMs preferred</li> </ul> <p>Thank you for contributing to my json2vars-setter!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and use the JSON to Variables Setter action in your GitHub workflow.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub repository where you want to implement the action</li> <li>Basic understanding of GitHub Actions workflows</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>As this is a GitHub Action, there's no installation required. You simply reference the action in your workflow file.</p>"},{"location":"getting-started/#basic-setup","title":"Basic Setup","text":""},{"location":"getting-started/#step-1-create-a-json-configuration-file","title":"Step 1: Create a JSON Configuration File","text":"<p>First, create a JSON file to define your matrix testing environment. By default, the action looks for this file at <code>.github/json2vars-setter/matrix.json</code>.</p> <p>Here's a basic example:</p> <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\",\n        \"windows-latest\",\n        \"macos-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.10\",\n            \"3.11\",\n            \"3.12\"\n        ]\n    },\n    \"ghpages_branch\": \"gh-pages\"\n}\n</code></pre> <p>You only need to include the languages your project uses. For example, if your project only uses Python, you don't need to include other languages like Ruby or Node.js.</p>"},{"location":"getting-started/#step-2-configure-your-workflow","title":"Step 2: Configure Your Workflow","text":"<p>Add the JSON to Variables Setter action to your workflow file. Here's a basic example:</p> <pre><code>name: Build and Test\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n</code></pre> <p>Important</p> <p>Make sure to define the outputs at the job level if you plan to use them in other jobs.</p>"},{"location":"getting-started/#step-3-use-the-generated-variables","title":"Step 3: Use the Generated Variables","text":"<p>Now you can use the variables in your workflow. There are several ways to access them:</p>"},{"location":"getting-started/#within-the-same-job","title":"Within the Same Job","text":"<pre><code>- name: Access Variables\n  run: |\n    echo \"OS List: ${{ steps.json2vars.outputs.os }}\"\n    echo \"First OS: ${{ fromJson(steps.json2vars.outputs.os)[0] }}\"\n    echo \"Python Versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre>"},{"location":"getting-started/#with-a-matrix-strategy","title":"With a Matrix Strategy","text":"<pre><code>test_matrix:\n  needs: set_variables\n  strategy:\n    matrix:\n      os: ${{ fromJson(needs.set_variables.outputs.os) }}\n      python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n\n  runs-on: ${{ matrix.os }}\n\n  steps:\n    - name: Set up Python\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n</code></pre>"},{"location":"getting-started/#available-outputs","title":"Available Outputs","text":"<p>The action provides the following outputs:</p> Output Description <code>os</code> List of operating systems <code>versions_python</code> List of Python versions <code>versions_ruby</code> List of Ruby versions <code>versions_nodejs</code> List of Node.js versions <code>versions_go</code> List of Go versions <code>versions_rust</code> List of Rust versions <code>ghpages_branch</code> GitHub Pages branch name <p>How to refer to Output in subsequent steps or jobs</p> <ul> <li>When accessing list variables (like <code>os</code> or <code>versions_python</code>), always use the <code>fromJson()</code> function to parse the JSON string.</li> <li>For shell scripts, use single quotes (<code>'</code>) around the JSON string to preserve its structure.</li> <li>If you don't define a language in your JSON file, its corresponding output will be an empty array.</li> <li>You can create language-specific JSON files (e.g., <code>python_project_matrix.json</code>) for different projects.</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about JSON to Variables transformation</li> <li>Explore Dynamic Version Updates to automatically keep your matrix up-to-date</li> <li>Check out Version Caching to optimize your workflow performance</li> </ul>"},{"location":"examples/basic/","title":"Basic Usage Examples","text":"<p>This page demonstrates basic usage patterns for the JSON to Variables Setter action. These examples cover common scenarios and provide a foundation for integrating the action into your workflows.</p>"},{"location":"examples/basic/#simple-json-parsing","title":"Simple JSON Parsing","text":"<p>The most basic use case is parsing a JSON file to make its values available as GitHub Actions outputs.</p>"},{"location":"examples/basic/#configuration-file","title":"Configuration File","text":"<p>First, create a matrix.json file in <code>.github/json2vars-setter/</code>:</p> <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\",\n        \"windows-latest\",\n        \"macos-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.10\",\n            \"3.11\",\n            \"3.12\"\n        ]\n    },\n    \"ghpages_branch\": \"gh-pages\"\n}\n</code></pre>"},{"location":"examples/basic/#basic-workflow","title":"Basic Workflow","text":"<pre><code>name: Basic Example\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n\n      - name: Check outputs\n        run: |\n          echo \"Operating Systems: ${{ steps.json2vars.outputs.os }}\"\n          echo \"Python Versions: ${{ steps.json2vars.outputs.versions_python }}\"\n          echo \"GitHub Pages Branch: ${{ steps.json2vars.outputs.ghpages_branch }}\"\n</code></pre>"},{"location":"examples/basic/#matrix-strategy-example","title":"Matrix Strategy Example","text":"<p>This example demonstrates how to use the parsed values in a matrix strategy for parallel testing.</p> <pre><code>name: Matrix Testing\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n\n  test:\n    needs: set_variables\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: ${{ fromJson(needs.set_variables.outputs.os) }}\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          pytest\n</code></pre>"},{"location":"examples/basic/#dynamic-update-example","title":"Dynamic Update Example","text":"<p>This example shows how to dynamically update your matrix JSON with the latest language versions.</p> <pre><code>name: Dynamic Matrix Update\n\njobs:\n  build_and_test:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables with dynamic update\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          python-strategy: 'stable'\n          nodejs-strategy: 'latest'\n\n      - name: Show updated matrix\n        run: |\n          echo \"Python versions: ${{ steps.json2vars.outputs.versions_python }}\"\n          echo \"Node.js versions: ${{ steps.json2vars.outputs.versions_nodejs }}\"\n\n  test_python:\n    needs: build_and_test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ${{ fromJson(needs.build_and_test.outputs.versions_python) }}\n\n    steps:\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Check Python version\n        run: python --version\n</code></pre>"},{"location":"examples/basic/#version-caching-example","title":"Version Caching Example","text":"<p>This example demonstrates how to use the version caching feature to reduce API calls.</p> <pre><code>name: Cached Version Matrix\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables with cached versions\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          use-cache: 'true'\n          cache-max-age: '7'  # Update cache if older than 7 days\n          cache-languages: 'python'\n          keep-existing: 'true'\n\n      - name: Show cached versions\n        run: |\n          echo \"Python versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre>"},{"location":"examples/basic/#custom-matrix-configuration","title":"Custom Matrix Configuration","text":"<p>This example shows how to use a custom matrix configuration file.</p> <pre><code>name: Custom Matrix Configuration\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from custom JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/python_project_matrix.json\n\n      - name: Show configured versions\n        run: |\n          echo \"Python versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre> <p>With custom matrix file <code>.github/json2vars-setter/python_project_matrix.json</code>:</p> <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.9\",\n            \"3.10\",\n            \"3.11\"\n        ]\n    }\n}\n</code></pre>"},{"location":"examples/basic/#multiple-language-example","title":"Multiple Language Example","text":"<p>This example demonstrates testing with multiple programming languages configured in the matrix.</p> <pre><code>name: Multi-language Tests\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n\n  test_python:\n    needs: set_variables\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n\n    steps:\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run Python tests\n        run: |\n          python --version\n          # ... run your Python tests ...\n\n  test_nodejs:\n    needs: set_variables\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: ${{ fromJson(needs.set_variables.outputs.versions_nodejs) }}\n\n    steps:\n      - name: Set up Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Run Node.js tests\n        run: |\n          node --version\n          # ... run your Node.js tests ...\n</code></pre>"},{"location":"examples/basic/#weekly-matrix-update-example","title":"Weekly Matrix Update Example","text":"<p>This example demonstrates how to set up a scheduled workflow to update your matrix weekly.</p> <pre><code>name: Weekly Matrix Update\n\non:\n  schedule:\n    - cron: '0 0 * * 0'  # Run every Sunday at midnight\n\njobs:\n  update_matrix:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Update matrix.json\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          all: 'stable'  # Use stable versions for all languages\n\n      - name: Commit changes\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add .github/json2vars-setter/matrix.json\n          git commit -m \"Update testing matrix with latest stable versions\" || echo \"No changes to commit\"\n          git push\n</code></pre>"},{"location":"examples/basic/#next-steps","title":"Next Steps","text":"<ul> <li>See the CI/CD examples for integration patterns</li> <li>Visit Troubleshooting for help with common issues</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"examples/ci-cd/","title":"CI/CD Integration Examples","text":"<p>This page demonstrates how to integrate the JSON to Variables Setter action into comprehensive CI/CD pipelines. These examples build upon the basic usage patterns to show more advanced workflow integrations.</p>"},{"location":"examples/ci-cd/#complete-cicd-pipeline-example","title":"Complete CI/CD Pipeline Example","text":"<p>This example shows a complete CI/CD pipeline that uses json2vars-setter for both testing and deployment environments. It properly sequences the operations to ensure tests pass before committing any changes.</p> <pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * 1'  # Weekly update every Monday\n\njobs:\n  # Step 1: Update matrix configuration (weekly or on main branch)\n  update_matrix:\n    if: github.event_name == 'schedule' || (github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main')\n    runs-on: ubuntu-latest\n    outputs:\n      matrix_updated: ${{ steps.check_changes.outputs.updated }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Update matrix configuration\n        id: update_matrix\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          python-strategy: 'stable'\n          nodejs-strategy: 'stable'\n\n      # Set output to indicate if matrix was updated\n      - name: Check for changes\n        id: check_changes\n        run: |\n          if git diff --quiet .github/json2vars-setter/matrix.json; then\n            echo \"updated=false\" &gt;&gt; $GITHUB_OUTPUT\n          else\n            echo \"updated=true\" &gt;&gt; $GITHUB_OUTPUT\n          fi\n\n  # Step 2: Define variables from matrix (always runs)\n  set_variables:\n    needs: [update_matrix]\n    if: always()  # Run even if update_matrix is skipped\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}\n      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from JSON\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n\n  # Step 3: Run tests across matrix\n  test:\n    needs: [set_variables, update_matrix]\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false  # Continue with other jobs even if one fails\n      matrix:\n        os: ${{ fromJson(needs.set_variables.outputs.os) }}\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Run tests\n        run: pytest\n\n  # Step 4: Commit changes only after all tests pass\n  commit_changes:\n    needs: [test, update_matrix]\n    if: needs.update_matrix.outputs.matrix_updated == 'true'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # Apply matrix updates again since they were not committed yet\n      - name: Update matrix configuration\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          python-strategy: 'stable'\n          nodejs-strategy: 'stable'\n\n      - name: Commit updated matrix\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add .github/json2vars-setter/matrix.json\n          git commit -m \"Update testing matrix with latest stable versions\" || echo \"No changes to commit\"\n          git push\n</code></pre> <p>For repositories with branch protection rules</p> <p>If your repository has direct commit restrictions on the main branch, replace the <code>Commit updated matrix</code> step in the <code>commit_changes</code> job with the following to create a pull request instead:</p> <pre><code>- name: Create pull request with updated matrix\n  run: |\n    # Configure git\n    git config user.name \"github-actions[bot]\"\n    git config user.email \"github-actions[bot]@users.noreply.github.com\"\n\n    # Create a new branch and commit changes\n    git checkout -b update-matrix-${{ github.run_id }}\n    git add .github/json2vars-setter/matrix.json\n    git commit -m \"Update testing matrix with latest stable versions\" || exit 0\n\n    # Push to the new branch\n    git push origin update-matrix-${{ github.run_id }}\n\n    # Create a pull request using GitHub CLI\n    gh pr create \\\n      --title \"Update testing matrix with latest stable versions\" \\\n      --body \"This PR updates the test matrix after all tests have passed successfully.\" \\\n      --base main \\\n      --head update-matrix-${{ github.run_id }}\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>Note</p> <p>That you might need a PAT (Personal Access Token) with appropriate permissions if your workflow needs to create pull requests that trigger other workflows. In that case, use <code>secrets.YOUR_PAT_SECRET</code> instead of <code>secrets.GITHUB_TOKEN</code>.</p>"},{"location":"examples/ci-cd/#environment-specific-configurations","title":"Environment-Specific Configurations","text":"<p>This example demonstrates using different configurations for development and production environments. This is particularly useful for teams that want to test extensively in production while keeping development iterations quick.</p> <pre><code>name: Environment-Specific Testing\n\non:\n  push:\n    branches: [ main, dev ]\n  pull_request:\n    branches: [ main, dev ]\n\njobs:\n  set_variables:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix_config: ${{ steps.matrix_config.outputs.config }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Determine environment\n        id: environment\n        run: |\n          if [[ \"${{ github.ref }}\" == \"refs/heads/main\" || \"${{ github.base_ref }}\" == \"main\" ]]; then\n            echo \"env=production\" &gt;&gt; $GITHUB_OUTPUT\n          else\n            echo \"env=development\" &gt;&gt; $GITHUB_OUTPUT\n          fi\n\n      - name: Set variables for production\n        id: json2vars_prod\n        if: steps.environment.outputs.env == 'production'\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/production_matrix.json\n\n      - name: Set variables for development\n        id: json2vars_dev\n        if: steps.environment.outputs.env == 'development'\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/development_matrix.json\n          update-matrix: 'true'\n          all: 'latest'\n\n      - name: Set matrix configuration\n        id: matrix_config\n        run: |\n          if [[ \"${{ steps.environment.outputs.env }}\" == \"production\" ]]; then\n            echo \"config={\\\"os\\\":${{ steps.json2vars_prod.outputs.os }},\\\"python-version\\\":${{ steps.json2vars_prod.outputs.versions_python }}}\" &gt;&gt; $GITHUB_OUTPUT\n          else\n            echo \"config={\\\"os\\\":${{ steps.json2vars_dev.outputs.os }},\\\"python-version\\\":${{ steps.json2vars_dev.outputs.versions_python }}}\" &gt;&gt; $GITHUB_OUTPUT\n          fi\n\n  test:\n    needs: set_variables\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix: ${{ fromJson(needs.set_variables.outputs.matrix_config) }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          python -m pip install --upgrade pip\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          pytest\n</code></pre> <p>Example JSON configurations for different environments:</p> production_matrix.json <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\",\n        \"windows-latest\",\n        \"macos-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.10\",\n            \"3.11\"\n        ]\n    }\n}\n</code></pre> development_matrix.json <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.11\",\n            \"3.12\"\n        ]\n    }\n}\n</code></pre>"},{"location":"examples/ci-cd/#optimized-strategy-for-large-projects","title":"Optimized Strategy for Large Projects","text":"<p>This example shows an optimized approach for large projects with multiple languages, using caching to reduce API calls. This is especially valuable for repositories that need to test against many language versions but want to minimize external API requests.</p> <pre><code>name: Multi-Language Project CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  update_cache:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Update version cache\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          use-cache: 'true'\n          force-cache-update: 'true'\n          cache-incremental: 'true'\n          cache-count: '20'\n          cache-only: 'true'  # Only update cache, don't generate template\n\n      - name: Commit updated cache\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add .github/json2vars-setter/cache\n          git commit -m \"Update version cache\" || echo \"No changes to commit\"\n          git push\n\n  set_variables:\n    runs-on: ubuntu-latest\n    needs: [update_cache]\n    if: always()  # Run even if update_cache is skipped or fails\n    outputs:\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}\n      versions_ruby: ${{ steps.json2vars.outputs.versions_ruby }}\n      versions_go: ${{ steps.json2vars.outputs.versions_go }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables from cache\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          use-cache: 'true'\n          template-only: 'true'  # Use existing cache\n          sort-order: 'desc'\n\n  test_python:\n    needs: set_variables\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n      fail-fast: false\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Run Python tests\n        run: pytest python_tests/\n\n  test_nodejs:\n    needs: set_variables\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: ${{ fromJson(needs.set_variables.outputs.versions_nodejs) }}\n      fail-fast: false\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Run Node.js tests\n        run: npm test\n\n  # Similar jobs for Ruby and Go\n</code></pre> <p>Branch protection for cache updates</p> <p>If your repository uses branch protection rules, you can modify the <code>Commit updated cache</code> step to create a pull request similar to the example in the first section.</p>"},{"location":"examples/ci-cd/#scheduled-maintenance-workflow","title":"Scheduled Maintenance Workflow","text":"<p>This example demonstrates a dedicated maintenance workflow that runs on a schedule to keep your matrix configuration up-to-date. By separating this into its own workflow, you can avoid unnecessary updates during normal development cycles.</p> <pre><code>name: Matrix Maintenance\n\non:\n  schedule:\n    - cron: '0 0 * * 0'  # Run every Sunday at midnight\n  workflow_dispatch:     # Allow manual triggering\n\njobs:\n  update_cache:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Update version cache\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          use-cache: 'true'\n          cache-max-age: '1'  # Force update\n          cache-incremental: 'true'\n          cache-languages: 'python,nodejs,ruby,go,rust'\n          keep-existing: 'true'\n\n      - name: Update dynamic versions\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/latest_matrix.json\n          update-matrix: 'true'\n          all: 'latest'\n\n      - name: Commit updated files\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add .github/json2vars-setter/matrix.json\n          git add .github/json2vars-setter/latest_matrix.json\n          git add .github/json2vars-setter/cache\n          git commit -m \"Weekly matrix configuration update\" || echo \"No changes to commit\"\n          git push\n</code></pre>"},{"location":"examples/ci-cd/#monorepo-project-configuration","title":"Monorepo Project Configuration","text":"<p>This example demonstrates how to handle multiple projects in a monorepo, each with their own language requirements. This approach is ideal for organizations that maintain multiple independent projects in a single repository.</p> <pre><code>name: Monorepo CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n    paths:\n      - 'project-a/**'\n      - 'project-b/**'\n      - '.github/json2vars-setter/**'\n\njobs:\n  detect_changes:\n    runs-on: ubuntu-latest\n    outputs:\n      project_a: ${{ steps.filter.outputs.project_a }}\n      project_b: ${{ steps.filter.outputs.project_b }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Check for changes\n        uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            project_a:\n              - 'project-a/**'\n            project_b:\n              - 'project-b/**'\n\n  # Project A (Python)\n  set_variables_a:\n    needs: detect_changes\n    if: needs.detect_changes.outputs.project_a == 'true'\n    runs-on: ubuntu-latest\n    outputs:\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables for Project A\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: project-a/.github/matrix.json\n          use-cache: 'true'\n          cache-languages: 'python'\n          keep-existing: 'true'\n\n  test_project_a:\n    needs: [detect_changes, set_variables_a]\n    if: needs.detect_changes.outputs.project_a == 'true'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ${{ fromJson(needs.set_variables_a.outputs.versions_python) }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Test Project A\n        run: |\n          cd project-a\n          pip install -r requirements.txt\n          pytest\n\n  # Project B (Node.js)\n  set_variables_b:\n    needs: detect_changes\n    if: needs.detect_changes.outputs.project_b == 'true'\n    runs-on: ubuntu-latest\n    outputs:\n      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables for Project B\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: project-b/.github/matrix.json\n          use-cache: 'true'\n          cache-languages: 'nodejs'\n          keep-existing: 'true'\n\n  test_project_b:\n    needs: [detect_changes, set_variables_b]\n    if: needs.detect_changes.outputs.project_b == 'true'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: ${{ fromJson(needs.set_variables_b.outputs.versions_nodejs) }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Test Project B\n        run: |\n          cd project-b\n          npm install\n          npm test\n</code></pre>"},{"location":"examples/ci-cd/#next-steps","title":"Next Steps","text":"<ul> <li>Check the Basic Usage Examples for simple configurations</li> <li>Visit Troubleshooting for help with common issues</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"examples/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues when using the JSON to Variables Setter action. It also provides debugging techniques and best practices for handling edge cases.</p>"},{"location":"examples/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"examples/troubleshooting/#api-rate-limit-exceeded","title":"API Rate Limit Exceeded","text":"<p>Symptom</p> <p>Actions fail with <code>API rate limit exceeded</code> error in logs.</p> <p>Solution</p> <p>Add GitHub authentication token to increase rate limits.</p> <pre><code>- name: Set variables with authentication\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"examples/troubleshooting/#missing-or-empty-outputs","title":"Missing or Empty Outputs","text":"<p>Symptom</p> <p>Expected outputs are not available or are empty.</p> <p>Possible Causes and Solutions</p> <ol> <li> <p>Missing <code>id</code> attribute:</p> <pre><code># Incorrect - missing id\n- name: Set variables from JSON\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n\n# Correct\n- name: Set variables from JSON\n  id: json2vars  # This is required to reference outputs\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n</code></pre> </li> <li> <p>JSON structure issue:</p> <ul> <li>Ensure your JSON file has the expected structure:</li> </ul> <pre><code>{\n  \"os\": [\"ubuntu-latest\"],\n  \"versions\": {\n    \"python\": [\"3.10\", \"3.11\"]\n  }\n}\n</code></pre> <ul> <li>Language versions must be under <code>versions.&lt;language&gt;</code> key</li> </ul> </li> <li> <p>Output references:</p> <pre><code># Incorrect output reference\necho \"Python versions: ${{ steps.json2vars.versions_python }}\"\n\n# Correct output reference\necho \"Python versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre> </li> </ol>"},{"location":"examples/troubleshooting/#matrix-strategy-failures","title":"Matrix Strategy Failures","text":"<p>Symptom</p> <p>Matrix strategy fails with error like <code>The value of 'matrix.python-version' is invalid</code>.</p> <p>Solutions</p> <ol> <li> <p>Check JSON parsing:</p> <pre><code># Incorrect - missing fromJson\nmatrix:\n  python-version: ${{ needs.set_variables.outputs.versions_python }}\n\n# Correct\nmatrix:\n  python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n</code></pre> </li> <li> <p>Verify output content:</p> <pre><code>- name: Debug outputs\n  run: |\n    echo \"Raw output: ${{ steps.json2vars.outputs.versions_python }}\"\n    echo \"Type: ${{ typeof(steps.json2vars.outputs.versions_python) }}\"\n</code></pre> </li> </ol>"},{"location":"examples/troubleshooting/#cache-related-issues","title":"Cache-Related Issues","text":"<p>Symptom</p> <p>Cache is not updating or is generating incorrect templates.</p> <p>Solutions</p> <ol> <li> <p>Force cache update:</p> <pre><code>- name: Force cache update\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    force-cache-update: 'true'\n</code></pre> </li> <li> <p>Check cache file location:</p> <p>The default cache location is <code>.github/json2vars-setter/cache/version_cache.json</code>. Ensure this directory exists and is writable.</p> </li> <li> <p>Commit cache files:</p> <pre><code>- name: Commit updated cache\n  run: |\n    git config --local user.email \"actions@github.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add .github/json2vars-setter/cache/version_cache.json\n    git commit -m \"Update version cache\"\n    git push\n</code></pre> </li> </ol>"},{"location":"examples/troubleshooting/#conflicting-strategies","title":"Conflicting Strategies","text":"<p>Symptom</p> <p>Unexpected behavior when using multiple strategies.</p> <p>Solutions</p> <p>Never use <code>update-matrix: 'true'</code> and <code>use-cache: 'true'</code> together.  They are mutually exclusive strategies.</p> <pre><code># Incorrect - conflicting strategies\n- name: Set variables\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    use-cache: 'true'  # Will be ignored when update-matrix is true\n\n# Correct - choose one strategy\n- name: Set variables with dynamic update\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n</code></pre>"},{"location":"examples/troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"examples/troubleshooting/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<p>Add the <code>--verbose</code> flag to see detailed logs:</p> <pre><code>- name: Debug cache version info\n  run: |\n    python ${{ github.action_path }}/json2vars_setter/cache_version_info.py --verbose\n</code></pre> <p>Or use the built-in debug output:</p> <pre><code>- name: Set variables with debug\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    verbose: 'true'  # Enable verbose logging\n</code></pre>"},{"location":"examples/troubleshooting/#test-configurations-locally","title":"Test Configurations Locally","text":"<p>You can test the scripts locally before using them in GitHub Actions:</p> <pre><code># Test cache_version_info.py\npython path/to/cache_version_info.py --template-only --verbose\n\n# Test update_matrix_dynamic.py\npython path/to/update_matrix_dynamic.py --json-file ./matrix.json --all stable --dry-run\n</code></pre>"},{"location":"examples/troubleshooting/#inspect-generated-files","title":"Inspect Generated Files","text":"<p>Examine the generated files for debugging:</p> <pre><code>- name: Inspect generated files\n  run: |\n    echo \"Matrix JSON content:\"\n    cat .github/json2vars-setter/matrix.json\n\n    echo \"Cache content:\"\n    cat .github/json2vars-setter/cache/version_cache.json\n</code></pre>"},{"location":"examples/troubleshooting/#check-github-api-quota","title":"Check GitHub API Quota","text":"<p>Monitor your GitHub API quota:</p> <pre><code>- name: Check API rate limit\n  run: |\n    curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/rate_limit\n</code></pre>"},{"location":"examples/troubleshooting/#edge-cases-and-advanced-solutions","title":"Edge Cases and Advanced Solutions","text":""},{"location":"examples/troubleshooting/#handling-large-matrices","title":"Handling Large Matrices","text":"<p>If your matrix becomes too large, you can split it into smaller jobs:</p> <pre><code>jobs:\n  set_variables:\n    # ... set variables job ...\n\n  python_tests:\n    needs: set_variables\n    strategy:\n      matrix:\n        python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n        group: [1, 2, 3]  # Split tests into groups\n\n    steps:\n      # ... setup ...\n      - name: Run tests for group ${{ matrix.group }}\n        run: |\n          pytest tests/group${{ matrix.group }} --verbose\n</code></pre>"},{"location":"examples/troubleshooting/#handling-missing-languages","title":"Handling Missing Languages","text":"<p>Create a fallback for languages not defined in your JSON:</p> <pre><code>- name: Set fallback versions\n  id: fallback\n  run: |\n    # Default values if not found in matrix.json\n    echo \"versions_ruby=[\\\"3.1\\\",\\\"3.2\\\"]\" &gt;&gt; $GITHUB_OUTPUT\n\n- name: Use actual or fallback versions\n  run: |\n    if [[ \"${{ steps.json2vars.outputs.versions_ruby }}\" == \"\" ]]; then\n      echo \"Using fallback Ruby versions: ${{ steps.fallback.outputs.versions_ruby }}\"\n      echo \"RUBY_VERSIONS=${{ steps.fallback.outputs.versions_ruby }}\" &gt;&gt; $GITHUB_ENV\n    else\n      echo \"Using configured Ruby versions: ${{ steps.json2vars.outputs.versions_ruby }}\"\n      echo \"RUBY_VERSIONS=${{ steps.json2vars.outputs.versions_ruby }}\" &gt;&gt; $GITHUB_ENV\n    fi\n</code></pre>"},{"location":"examples/troubleshooting/#dynamic-file-path-selection","title":"Dynamic File Path Selection","text":"<p>Choose a JSON file dynamically based on context:</p> <pre><code>- name: Determine config file\n  id: config_file\n  run: |\n    if [[ \"${{ github.ref }}\" == \"refs/heads/main\" ]]; then\n      echo \"file=.github/json2vars-setter/production_matrix.json\" &gt;&gt; $GITHUB_OUTPUT\n    else\n      echo \"file=.github/json2vars-setter/development_matrix.json\" &gt;&gt; $GITHUB_OUTPUT\n    fi\n\n- name: Set variables from dynamic path\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: ${{ steps.config_file.outputs.file }}\n</code></pre>"},{"location":"examples/troubleshooting/#conditional-strategy-selection","title":"Conditional Strategy Selection","text":"<p>Select update strategy based on specific conditions:</p> <pre><code>- name: Determine strategy\n  id: strategy\n  run: |\n    DAY_OF_WEEK=$(date +%u)\n    if [[ $DAY_OF_WEEK -eq 1 ]]; then  # Monday\n      echo \"update=true\" &gt;&gt; $GITHUB_OUTPUT\n      echo \"strategy=latest\" &gt;&gt; $GITHUB_OUTPUT\n    else\n      echo \"update=false\" &gt;&gt; $GITHUB_OUTPUT\n    fi\n\n- name: Set variables\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: ${{ steps.strategy.outputs.update }}\n    all: ${{ steps.strategy.outputs.strategy }}\n</code></pre>"},{"location":"examples/troubleshooting/#github-api-rate-limit-management","title":"GitHub API Rate Limit Management","text":""},{"location":"examples/troubleshooting/#authentication-for-higher-limits","title":"Authentication for Higher Limits","text":"<p>Use GitHub authentication to increase API rate limits:</p> <pre><code>- name: Set up GitHub token\n  run: |\n    echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" &gt;&gt; $GITHUB_ENV\n\n- name: Set variables with authentication\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n  env:\n    GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}\n</code></pre>"},{"location":"examples/troubleshooting/#minimize-api-calls","title":"Minimize API Calls","text":"<p>Optimize your workflow to reduce API calls:</p> <ol> <li> <p>Use caching with appropriate <code>max-age</code></p> <pre><code>- name: Set variables with caching\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-max-age: '7'  # Update weekly\n</code></pre> </li> <li> <p>Use template-only mode when cache exists</p> <pre><code>- name: Set variables from cache\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    template-only: 'true'  # No API calls\n</code></pre> </li> <li> <p>Schedule updates during low-traffic periods</p> <pre><code>on:\n  schedule:\n    - cron: '0 3 * * 0'  # Sunday 3 AM\n</code></pre> </li> </ol>"},{"location":"examples/troubleshooting/#using-cache-with-incremental-updates","title":"Using Cache with Incremental Updates","text":"<p>Keep a comprehensive version history while minimizing API usage:</p> <pre><code>- name: Update cache incrementally\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-max-age: '7'\n    cache-incremental: 'true'\n    cache-count: '30'  # Store up to 30 versions\n</code></pre>"},{"location":"examples/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Check the Basic Usage Examples for simple configurations</li> <li>See the CI/CD examples for integration patterns</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"features/","title":"Features Overview","text":"<p>JSON to Variables Setter (json2vars-setter) provides a comprehensive set of features to streamline the management of GitHub Actions workflow configurations. The action consists of three main components that work together to provide a powerful and flexible solution.</p>"},{"location":"features/#core-components","title":"Core Components","text":"<pre><code>graph TD\n    subgraph \"JSON to Variables Setter\"\n        A[JSON to Variables Parser ] --&gt;|Reads| B[Matrix JSON File]\n        A --&gt;|Sets| C[GitHub Actions Outputs]\n\n        D[Dynamic Matrix Updater] --&gt;|Updates| B\n        D --&gt;|Fetches from| E[GitHub API]\n\n        F[Version Cache Manager] --&gt;|Caches| G[Version Information]\n        F --&gt;|Fetches from| E\n        F --&gt;|Generates| B\n    end\n\n    C --&gt;|Used by| I[GitHub Workflows]\n\n    classDef core fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#fff\n    classDef file fill:#ffca28,stroke:#fb8c00,stroke-width:1px,color:#333333\n    classDef output fill:#42a5f5,stroke:#1976d2,stroke-width:1px\n    classDef external fill:#78909c,stroke:#546e7a,stroke-width:1px\n    classDef api fill:#e91e63,stroke:#c2185b,stroke-width:1px,color:#fff\n\n    class A,D,F core\n    class B,G file\n    class C output\n    class I external\n    class E api</code></pre>"},{"location":"features/#1-json-to-variables-parser-json_to_github_outputpy","title":"1. JSON to Variables Parser (<code>json_to_github_output.py</code>)","text":"<p>The core component of the action. It reads a JSON configuration file and converts its contents into GitHub Actions output variables that can be used in your workflows.</p>"},{"location":"features/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Parse JSON files into GitHub Actions outputs</li> <li>Support for nested structures with appropriate naming conventions</li> <li>Efficient handling of array data for matrix strategies</li> <li>Convert complex data structures into workflow-friendly formats</li> </ul> <p>Learn more about JSON to Variables</p>"},{"location":"features/#2-dynamic-matrix-updater-update_matrix_dynamicpy","title":"2. Dynamic Matrix Updater (<code>update_matrix_dynamic.py</code>)","text":"<p>Automatically updates your matrix configuration with the latest or stable language versions from official sources.</p>"},{"location":"features/#key-capabilities_1","title":"Key Capabilities","text":"<ul> <li>Update matrix configuration on-the-fly during workflow execution</li> <li>Select between latest versions, stable versions, or both</li> <li>Configurable update strategies per language</li> <li>Dry-run mode for testing before committing changes</li> </ul> <p>Learn more about Dynamic Updates</p>"},{"location":"features/#3-version-cache-manager-cache_version_infopy","title":"3. Version Cache Manager (<code>cache_version_info.py</code>)","text":"<p>Manages version information cache to optimize API usage and workflow performance.</p>"},{"location":"features/#key-capabilities_2","title":"Key Capabilities","text":"<ul> <li>Cache version information to reduce API calls</li> <li>Configurable cache expiration and refresh policies</li> <li>Incremental updates to build version history</li> <li>Template generation from cached data</li> <li>Sort versions in ascending or descending order</li> </ul> <p>Learn more about Version Caching</p>"},{"location":"features/#how-these-components-work-together","title":"How These Components Work Together","text":"<p>The components of json2vars-setter can be used independently or in combination:</p> <pre><code>graph LR\n    A[Manual Configuration] --&gt;|Option 1| D[json_to_github_output.py]\n\n    B[Dynamic Update] --&gt;|Option 2| C[update_matrix_dynamic.py]\n    C --&gt;|Updates| D\n\n    E[Cached Versions] --&gt;|Option 3| F[cache_version_info.py]\n    F --&gt;|Generates| D\n\n    D --&gt;|Sets| G[GitHub Outputs]\n\n    %% Universal light/dark mode styles\n    classDef start fill:#78909c,stroke:#546e7a,stroke-width:1px\n    classDef process fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#fff\n    classDef output fill:#42a5f5,stroke:#1976d2,stroke-width:1px\n\n    class A,B,E start\n    class C,D,F process\n    class G output</code></pre> <ol> <li>Basic Usage: Use only the JSON parser to read your manually maintained matrix file</li> <li>Automated Matrix Updates: Combine the Dynamic Updater with the parser to always test against the latest versions</li> <li>Optimized CI/CD: Utilize all three components for an efficient, up-to-date testing infrastructure with minimal API calls</li> </ol>"},{"location":"features/#use-cases","title":"Use Cases","text":"<ul> <li>Standardized Matrix Testing: Define testing environments once and reference them consistently across workflows</li> <li>Automated Version Updates: Keep testing matrices current without manual intervention</li> <li>Efficient API Usage: Reduce external API calls by caching version information</li> <li>Cross-Platform Testing: Define operating systems and language versions for comprehensive testing</li> <li>Multi-Language Projects: Support for Python, Ruby, Node.js, Go, and Rust in a single configuration</li> </ul>"},{"location":"features/#component-integration","title":"Component Integration","text":"<p>The flexibility of json2vars-setter allows you to choose the components that best suit your project's needs:</p>"},{"location":"features/#basic-configuration-manual-json","title":"Basic Configuration (Manual JSON)","text":"<pre><code>- name: Set variables from JSON\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n</code></pre>"},{"location":"features/#dynamic-updates-automated-version-management","title":"Dynamic Updates (Automated Version Management)","text":"<pre><code>- name: Update matrix with latest versions\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    python-strategy: 'stable'\n    nodejs-strategy: 'latest'\n</code></pre>"},{"location":"features/#version-caching-optimized-api-usage","title":"Version Caching (Optimized API Usage)","text":"<pre><code>- name: Update using cached version info\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-max-age: '7'\n    cache-incremental: 'true'\n</code></pre> <p>Choose the components that best suit your project's needs, from simple variable parsing to fully automated matrix management.</p>"},{"location":"features/dynamic-update/","title":"Dynamic Matrix Update","text":"<p>The Dynamic Matrix Updater (<code>update_matrix_dynamic.py</code>) automatically updates your matrix configuration with the latest or stable language versions from official sources.</p>"},{"location":"features/dynamic-update/#overview","title":"Overview","text":"<p>This component eliminates the need for manual version updates in your testing matrices. It fetches language version information from official APIs and updates your matrix JSON file based on specified strategies, ensuring your CI/CD workflows always test against relevant language versions.</p> <pre><code>graph TD\n    Start[json2vars-setter Action] --&gt;|Input Parameters| Condition{update-matrix?}\n\n    %% False path - direct JSON parsing\n    Condition --&gt;|false| G[json_to_github_output.py]\n\n    %% True path - update then parse\n    Condition --&gt;|true| Step1[Read JSON File&lt;br&gt;#40;If not specified, read in matrix.json#41;]\n    Step1 --&gt; Step2[Fetch from GitHub API]\n    Step2 --&gt; Step3[Filter by Strategy]\n    Step3 --&gt; Step4[Update JSON File]\n    Step4 --&gt; G\n\n    %% Common final step\n    G --&gt;|Set| H[GitHub Actions Outputs]\n\n    %% \u4e2d\u592e\u914d\u7f6e\u306e\u8a2d\u5b9a\n    linkStyle default stroke-width:2px\n\n    classDef condition fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#fff\n    classDef process fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#fff\n    classDef api fill:#e91e63,stroke:#c2185b,stroke-width:1px,color:#fff\n    classDef json fill:#ffca28,stroke:#fb8c00,stroke-width:1px,color:#333333\n    classDef output fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#fff\n    classDef start fill:#9c27b0,stroke:#6a1b9a,stroke-width:2px,color:#fff\n\n    class Start start\n    class Condition condition\n    class Step2 api\n    class Step1,Step3,G process\n    class Step4 json\n    class H output</code></pre>"},{"location":"features/dynamic-update/#features","title":"Features","text":""},{"location":"features/dynamic-update/#update-strategies","title":"Update Strategies","text":"<p>The updater provides flexible version selection through three distinct strategies:</p> <ol> <li> <p><code>stable</code>: Include only stable versions of the language</p> <ul> <li>Ideal for production environments and critical workflows</li> <li>Focuses on reliability and backward compatibility</li> </ul> </li> <li> <p><code>latest</code>: Include only the latest versions (including pre-releases)</p> <ul> <li>Perfect for cutting-edge testing and forward compatibility checks</li> <li>Ensures your code works with upcoming language releases</li> </ul> </li> <li> <p><code>both</code>: Include both stable and latest versions</p> <ul> <li>Comprehensive coverage for both stability and future-proofing</li> <li>Best for libraries and frameworks that need wide compatibility</li> </ul> </li> </ol>"},{"location":"features/dynamic-update/#configurable-per-language","title":"Configurable Per Language","text":"<p>One of the key advantages is the ability to specify different update strategies for each supported language, giving you fine-grained control over your testing matrix:</p> <pre><code>- name: Set variables from dynamically updated JSON\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    python-strategy: 'stable'\n    nodejs-strategy: 'latest'\n    ruby-strategy: 'both'\n</code></pre>"},{"location":"features/dynamic-update/#dry-run-mode","title":"Dry Run Mode","text":"<p>Test your update strategies without modifying your JSON file using the dry-run option:</p> <pre><code>- name: Test dynamic update without changing files\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    all: 'latest'\n    dry-run: 'true'\n</code></pre> <p>This helps you verify your configuration and see what changes would be made before committing to them.</p>"},{"location":"features/dynamic-update/#backup-creation","title":"Backup Creation","text":"<p>The updater automatically creates a backup of your original matrix file before making changes, providing an easy fallback if needed.</p>"},{"location":"features/dynamic-update/#usage-examples","title":"Usage Examples","text":""},{"location":"features/dynamic-update/#basic-example","title":"Basic Example","text":"<pre><code>name: Use Dynamic Matrix Update\n\njobs:\n  build_and_test:\n    runs-on: ubuntu-latest\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set variables with dynamic update\n        id: json2vars\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          all: 'latest'\n\n      # Use the outputs directly\n      - name: Display matrix info\n        run: |\n          echo \"OS: ${{ steps.json2vars.outputs.os }}\"\n          echo \"Python versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre>"},{"location":"features/dynamic-update/#language-specific-strategies","title":"Language-Specific Strategies","text":"<p>You can mix and match update strategies for different languages:</p> <pre><code>- name: Set variables with mixed update strategies\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    python-strategy: 'stable'\n    nodejs-strategy: 'latest'\n    go-strategy: 'both'\n</code></pre>"},{"location":"features/dynamic-update/#periodic-updates-with-scheduled-workflows","title":"Periodic Updates with Scheduled Workflows","text":"<p>Create a scheduled workflow to keep your matrix up-to-date automatically:</p> <pre><code>name: Update Matrix Weekly\n\non:\n  schedule:\n    - cron: '0 0 * * 0'  # Run every Sunday at midnight\n\njobs:\n  update_matrix:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Update matrix.json\n        uses: 7rikazhexde/json2vars-setter@v1.0.1\n        with:\n          json-file: .github/json2vars-setter/sample/matrix.json\n          update-matrix: 'true'\n          all: 'stable'\n\n      - name: Commit changes\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add .github/json2vars-setter/matrix.json\n          git commit -m \"Update testing matrix with latest stable versions\" || echo \"No changes to commit\"\n          git push\n</code></pre>"},{"location":"features/dynamic-update/#input-parameters","title":"Input Parameters","text":"<p>The Dynamic Matrix Updater accepts the following inputs:</p> Input Description Required Default <code>json-file</code> Path to the JSON file Yes - <code>update-matrix</code> Whether to update the matrix No <code>'false'</code> <code>update-strategy</code> Default strategy for all languages No - <code>python-strategy</code> Strategy for Python versions No - <code>nodejs-strategy</code> Strategy for Node.js versions No - <code>ruby-strategy</code> Strategy for Ruby versions No - <code>go-strategy</code> Strategy for Go versions No - <code>rust-strategy</code> Strategy for Rust versions No - <code>dry-run</code> Run without updating the file No <code>'false'</code>"},{"location":"features/dynamic-update/#how-it-works","title":"How It Works","text":"<p>When you set <code>update-matrix: 'true'</code>, the action performs these steps internally:</p> <ol> <li>Load Existing Configuration: The specified JSON file is loaded to retain its structure</li> <li>Fetch Version Information: For each language with a specified strategy, it contacts the official API</li> <li>Apply Update Strategy: Versions are filtered based on the specified strategy for each language</li> <li>Create a Backup: Before making changes, a backup of the original file is created (unless in dry-run mode)</li> <li>Update the Matrix: The JSON file is updated with the new version information</li> <li>Parse JSON: The updated JSON file is processed by json_to_github_output.py</li> <li>Set Outputs: The values from the JSON file are set as GitHub Actions outputs</li> </ol> <pre><code>sequenceDiagram\n    participant Workflow as GitHub Workflow\n    participant Action as json2vars-setter\n    participant Updater as update_matrix_dynamic.py\n    participant Parser as json_to_github_output.py\n    participant API as Language APIs\n    participant File as matrix.json\n\n    Workflow-&gt;&gt;Action: Run with update-matrix: 'true'\n    Action-&gt;&gt;Updater: Execute with strategies\n    Updater-&gt;&gt;File: Read existing config\n\n    loop For each language\n        Updater-&gt;&gt;API: Fetch version info\n        API-&gt;&gt;Updater: Return versions\n        Updater-&gt;&gt;Updater: Filter by strategy\n    end\n\n    Updater-&gt;&gt;File: Backup original (if not dry-run)\n    Updater-&gt;&gt;File: Update with new versions\n    Updater-&gt;&gt;Action: Return control\n    Action-&gt;&gt;Parser: Execute with updated JSON\n    Parser-&gt;&gt;File: Read updated JSON\n    Parser-&gt;&gt;Workflow: Set GitHub outputs</code></pre>"},{"location":"features/dynamic-update/#supported-languages","title":"Supported Languages","text":"<p>The Dynamic Matrix Updater currently supports:</p> <ul> <li>Python: Fetches from Python releases via GitHub API</li> <li>Node.js: Fetches from Node.js releases via GitHub API</li> <li>Ruby: Fetches from Ruby releases via GitHub API</li> <li>Go: Fetches from Go releases via GitHub API</li> <li>Rust: Fetches from Rust releases via GitHub API</li> </ul>"},{"location":"features/dynamic-update/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>dry-run: 'true'</code> to test your update strategy before implementing it</li> <li>Create a scheduled workflow to update your matrix on a regular basis (weekly or monthly)</li> <li>For critical workflows, use the <code>stable</code> strategy to avoid potential issues with latest releases</li> <li>For bleeding-edge testing, use the <code>latest</code> strategy</li> <li>For libraries and frameworks, use the <code>both</code> strategy to ensure wide compatibility</li> <li>Set up automated commits after updates to keep your repository in sync</li> <li>Consider combining with version caching for larger projects to optimize API usage (</li> </ul> <p>Note</p> <p>do not use both <code>update-matrix: 'true'</code> and <code>use-cache: 'true'</code> together; they are separate strategies</p>"},{"location":"features/dynamic-update/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Solution API rate limits Use GitHub authentication by setting up the <code>GITHUB_TOKEN</code> environment variable No versions found Check your JSON structure - versions should be under <code>versions.&lt;language&gt;</code> Errors parsing JSON Ensure your JSON file is valid and has the expected structure Unexpected version changes Use <code>dry-run: 'true'</code> to preview changes before applying them"},{"location":"features/dynamic-update/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to version caching your matrix configurations</li> <li>See basic examples of complete workflow configurations</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"features/json-to-variables/","title":"JSON to Variables","text":"<p>The JSON to Variables Parser (<code>json_to_github_output.py</code>) is the core component of the json2vars-setter action. It reads a JSON configuration file and sets its values as output variables in GitHub Actions workflows.</p>"},{"location":"features/json-to-variables/#overview","title":"Overview","text":"<p>This component serves as the foundation of the entire action, transforming static JSON configuration into dynamic workflow variables. It parses a JSON file and converts its contents into GitHub Actions output variables, making them available for use in subsequent steps or jobs in your workflow.</p> <pre><code>graph LR\n    A[JSON File] --&gt;|Read| B[json_to_github_output.py]\n    B --&gt;|Parse| C[Extract Values]\n    C --&gt;|Format| D[Set GitHub Outputs]\n    D --&gt;|Available in| E[Workflow Steps]\n    D --&gt;|Available in| F[Downstream Jobs]\n\n    classDef input fill:#ffca28,stroke:#fb8c00,stroke-width:1px,color:#333333\n    classDef process fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#fff\n    classDef output fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#fff\n\n    class A input\n    class B,C process\n    class D,E,F output</code></pre>"},{"location":"features/json-to-variables/#features","title":"Features","text":""},{"location":"features/json-to-variables/#smart-json-parsing","title":"Smart JSON Parsing","text":"<p>The parser recursively processes JSON data, handling various data types and structures:</p> <ul> <li>Simple Values: Scalar values like strings or numbers</li> <li>Arrays: Lists of values, preserved as JSON strings for matrix usage</li> <li>Nested Objects: Complex hierarchical structures with appropriate naming</li> </ul>"},{"location":"features/json-to-variables/#array-support-for-matrix-strategies","title":"Array Support for Matrix Strategies","text":"<p>One of the key features is its ability to handle arrays, which are essential for GitHub Actions matrix strategies. Arrays are preserved as JSON strings, making them directly usable with <code>fromJson()</code> in matrix configurations:</p> <pre><code>strategy:\n  matrix:\n    os: ${{ fromJson(needs.set_variables.outputs.os) }}\n    python-version: ${{ fromJson(needs.set_variables.outputs.versions_python) }}\n</code></pre>"},{"location":"features/json-to-variables/#automated-naming-conventions","title":"Automated Naming Conventions","text":"<p>The component applies appropriate naming conventions for GitHub Actions outputs:</p> <ul> <li>Key Standardization: Variables are converted to uppercase</li> <li>Nested Object Handling: Keys are concatenated with underscores for nested objects</li> <li>Consistent Output Format: Array elements are preserved in JSON format for easy parsing</li> </ul>"},{"location":"features/json-to-variables/#how-it-works","title":"How It Works","text":"<p>The parser works in the following steps:</p> <ol> <li>Read JSON File: The file is read from the specified path</li> <li>Parse Structure: The JSON structure is recursively parsed</li> <li>Transform Data: Values are converted to appropriate formats for GitHub Actions</li> <li>Set Outputs: All parsed variables are set as GitHub Actions outputs</li> </ol> <p>For example, when processing this JSON structure:</p> <pre><code>{\n    \"os\": [\n        \"ubuntu-latest\",\n        \"windows-latest\",\n        \"macos-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.10\",\n            \"3.11\",\n            \"3.12\"\n        ]\n    },\n    \"ghpages_branch\": \"gh-pages\"\n}\n</code></pre> <p>The parser generates these outputs:</p> <ul> <li><code>os</code>: <code>[\"ubuntu-latest\", \"windows-latest\"]</code></li> <li><code>versions_python</code>: <code>[\"3.10\", \"3.11\", \"3.11\"]</code></li> </ul>"},{"location":"features/json-to-variables/#usage","title":"Usage","text":"<p>Reference</p> <p>Please also refer to the workflow (Python Test).</p>"},{"location":"features/json-to-variables/#basic-example","title":"Basic Example","text":"<pre><code>- name: Set variables from JSON\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n</code></pre>"},{"location":"features/json-to-variables/#accessing-variables","title":"Accessing Variables","text":""},{"location":"features/json-to-variables/#within-the-same-job","title":"Within the Same Job","text":"<p>You can access the variables within the same job using the <code>steps</code> context:</p> <pre><code>- name: Use variables\n  run: |\n    echo \"OS List: ${{ steps.json2vars.outputs.os }}\"\n    echo \"First OS: ${{ fromJson(steps.json2vars.outputs.os)[0] }}\"\n    echo \"Python Versions: ${{ steps.json2vars.outputs.versions_python }}\"\n</code></pre>"},{"location":"features/json-to-variables/#in-subsequent-jobs","title":"In Subsequent Jobs","text":"<p>You can use the variables in subsequent jobs with the <code>needs</code> context:</p> <pre><code>jobs:\n  set_variables:\n    # Job that sets variables\n    outputs:\n      os: ${{ steps.json2vars.outputs.os }}\n      versions_python: ${{ steps.json2vars.outputs.versions_python }}\n\n  use_variables:\n    needs: set_variables\n    runs-on: ${{ fromJson(needs.set_variables.outputs.os)[0] }}\n    steps:\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ fromJson(needs.set_variables.outputs.versions_python)[0] }}\n</code></pre>"},{"location":"features/json-to-variables/#json-file-example","title":"JSON File Example","text":"<pre><code>{\n    \"os\": [\n        \"ubuntu-latest\",\n        \"windows-latest\",\n        \"macos-latest\"\n    ],\n    \"versions\": {\n        \"python\": [\n            \"3.10\",\n            \"3.11\",\n            \"3.12\"\n        ]\n    },\n    \"ghpages_branch\": \"gh-pages\"\n}\n</code></pre> <p>This example generates the following output variables:</p> <ul> <li><code>os</code>: <code>[\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]</code></li> <li><code>versions_python</code>: <code>[\"3.10\", \"3.11\", \"3.12\"]</code></li> <li><code>ghpages_branch</code>: <code>\"gh-pages\"</code></li> </ul>"},{"location":"features/json-to-variables/#advanced-usage","title":"Advanced Usage","text":""},{"location":"features/json-to-variables/#working-with-array-variables-in-shell-scripts","title":"Working with Array Variables in Shell Scripts","text":"<p>When using list variables in shell scripts, use single quotes to preserve the JSON structure:</p> <pre><code>- name: Process variables in shell\n  run: |\n    # Store JSON arrays with single quotes to preserve structure\n    os_list='${{ steps.json2vars.outputs.os }}'\n    python_versions='${{ steps.json2vars.outputs.versions_python }}'\n\n    # Use jq to process JSON arrays\n    first_os=$(echo \"$os_list\" | jq -r '.[0]')\n    echo \"First OS: $first_os\"\n\n    # Process all versions\n    echo \"$python_versions\" | jq -r '.[]' | while read version; do\n      echo \"Setting up Python $version\"\n    done\n</code></pre>"},{"location":"features/json-to-variables/#accessing-individual-elements-directly","title":"Accessing Individual Elements Directly","text":"<p>For direct access to specific array elements:</p> <pre><code>- name: Access array elements\n  run: |\n    echo \"Second OS: ${{ fromJson(steps.json2vars.outputs.os)[1] }}\"\n    echo \"First Python version: ${{ fromJson(steps.json2vars.outputs.versions_python)[0] }}\"\n</code></pre>"},{"location":"features/json-to-variables/#considerations","title":"Considerations","text":"<ul> <li>Variable Size Limits: GitHub Actions has limits on environment variable sizes</li> <li>JSON Parsing: List variables are serialized as JSON strings, requiring <code>fromJson()</code> when used</li> <li>Naming Conflicts: Avoid duplicate keys in your JSON as they may cause unpredictable behavior</li> <li>Debugging: Use <code>--debug</code> flag with the script for verbose output when troubleshooting</li> </ul>"},{"location":"features/json-to-variables/#technical-details","title":"Technical Details","text":"<p>The <code>json_to_github_output.py</code> script:</p> <ol> <li>Accepts a JSON file path as input</li> <li>Uses Python's <code>json</code> module to parse the file</li> <li>Recursively processes all elements using the <code>parse_json</code> function</li> <li>Writes to the <code>GITHUB_OUTPUT</code> environment file using the format required by GitHub Actions</li> </ol> <p>By understanding the internal workings of this component, you can leverage its full power to create dynamic, maintainable workflows.</p>"},{"location":"features/json-to-variables/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to dynamically update your matrix configurations</li> <li>Learn how to version caching your matrix configurations</li> <li>See basic examples of complete workflow configurations</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"features/version-caching/","title":"Version Caching","text":"<p>The Version Cache Manager (<code>cache_version_info.py</code>) manages version information cache to optimize API usage and workflow performance.</p>"},{"location":"features/version-caching/#overview","title":"Overview","text":"<p>This component reduces external API calls by caching version information, making your workflows faster and more resilient. It's especially useful for frequently run workflows or environments with API rate limits.</p>"},{"location":"features/version-caching/#component-overview","title":"Component Overview","text":"<pre><code>graph TD\n    Start[json2vars-setter Action] --&gt;|Input Parameters| GHACondition{use-cache?}\n    GHACondition --&gt; |true| MainPurpose1[cache_version_info.py]\n\n    MainPurpose1[cache_version_info.py] --&gt; MainPurpose2{Main Functions}\n\n    MainPurpose2 --&gt;|Create Template JSON| TemplateCreation[Template Creation]\n    MainPurpose2 --&gt;|Cache Version Info| CacheCreation[Cache Creation]\n\n    TemplateCreation --&gt; TemplateSource{Information Source}\n    TemplateSource --&gt;|From Existing Cache| UseCache[--template-only]\n    TemplateSource --&gt;|From API| UseAPI[Default or --force]\n\n    CacheCreation --&gt; UpdateFrequency{Update Frequency}\n    UpdateFrequency --&gt;|Force Update| ForceUpdate[--force]\n    UpdateFrequency --&gt;|Conditional Update| ConditionalUpdate[--max-age N]\n    UpdateFrequency --&gt;|Build History| History[--incremental]\n\n    %% Common options\n    UseCache --&gt; CommonOptions{Additional Options}\n    UseAPI --&gt; CommonOptions\n    ForceUpdate --&gt; CommonOptions\n    ConditionalUpdate --&gt; CommonOptions\n    History --&gt; CommonOptions\n\n    CommonOptions --&gt; Languages[--languages #91;*1#93;]\n    CommonOptions --&gt; KeepExisting[--keep-existing]\n    CommonOptions --&gt; FilePaths[--cache-file #91;*2#93;,&lt;br/&gt; --template-file #91;*2#93;,&lt;br/&gt; --existing-template #91;*2#93;]\n    CommonOptions --&gt; CacheCount[--count N]\n    CommonOptions --&gt; VersionCount[--output-count N]\n    CommonOptions --&gt; SortOrder[--sort asc/desc]\n    CommonOptions --&gt; CacheOnly[--cache-only]\n    CommonOptions --&gt; VerboseLog[--verbose]\n\n    %% Style definitions for better visibility in dark mode\n    classDef ghacondition fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#fff\n    classDef start fill:#9c27b0,stroke:#6a1b9a,stroke-width:2px,color:#ffffff\n    classDef main fill:#43a047,stroke:#2e7d32,stroke-width:2px,color:#ffffff\n    classDef condition fill:#ff9800,stroke:#e65100,stroke-width:2px,color:#000000\n    classDef option fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#ffffff\n    classDef common fill:#42a5f5,stroke:#1976d2,stroke-width:1px,color:#ffffff\n\n    class Start start\n    class GHACondition ghacondition\n    class MainPurpose1,MainPurpose2,TemplateCreation,CacheCreation main\n    class TemplateSource,UpdateFrequency,CommonOptions condition\n    class UseCache,UseAPI,ForceUpdate,ConditionalUpdate,History option\n    class Languages,FilePaths,CacheCount,VersionCount,SortOrder,KeepExisting,CacheOnly,VerboseLog common</code></pre>"},{"location":"features/version-caching/#tips","title":"Tips","text":"<p>[*1]: Specify language</p> <ul> <li>Specify languages separated by spaces; if <code>all</code> is specified, all target languages are retrieved.</li> <li>Target languages: <code>python</code>, <code>nodejs</code>, <code>ruby</code>, <code>go</code>, <code>rust</code></li> </ul> <p>[*2]: specify a path</p> <ul> <li>If the file does not exist in the path, an error will occur, so please create it beforehand.</li> </ul> <p>count vs output-count</p> <ul> <li><code>--count</code> controls how many versions to retrieve and store in the cache</li> <li><code>--output-count</code> controls how many of these versions appear in the output template (matrix.json)</li> <li>When <code>--output-count</code> is 0 or not specified, it automatically uses the value of <code>--count</code></li> <li>This allows you to cache many versions (e.g., <code>--count 10</code>) but limit how many appear in your matrix file (e.g., <code>--output-count 3</code>)</li> <li>Example use case: Cache 10 recent versions for history but only use the 3 most recent in your CI/CD matrix</li> </ul>"},{"location":"features/version-caching/#command-line-options","title":"Command Line Options","text":"Option Description Default <code>--template-only</code> Generate template from existing cache (<code>version_cache.json</code>) without API requests None <code>--force</code> Force update regardless of existing cache None <code>--max-age N</code> Update cache only after N daysCompares with <code>last_updated</code> value in existing cache 1 day <code>--incremental</code> Add new versions to existing cache (build history) None <code>--languages</code> Specify target languagesSeparate multiple languages with spacesSupported: python, nodejs, ruby, go, rust all <code>--count N</code> Number of versions to fetch and cache per language 10 <code>--output-count N</code> Number of versions to include in output templateWhen 0 or not specified, uses the value of <code>--count</code> 0 <code>--keep-existing</code> Maintain information for non-specified languages None <code>--cache-file</code> Path to cache file Default path <code>--template-file</code> Path to output template file Default path <code>--existing-template</code> Path to existing template to maintain structure None <code>--sort</code> Version sort order (desc: newest first, asc: oldest first) desc <code>--cache-only</code> Update cache only, don't generate template None <code>--verbose</code> Output detailed logs None"},{"location":"features/version-caching/#common-usage-examples","title":"Common Usage Examples","text":""},{"location":"features/version-caching/#template-creation","title":"Template Creation","text":""},{"location":"features/version-caching/#generate-template-from-existing-cache-without-api-calls","title":"Generate template from existing cache without API calls","text":"<pre><code>python json2vars_setter/cache_version_info.py --template-only\n</code></pre>"},{"location":"features/version-caching/#update-specific-languages-only-maintain-other-language-information","title":"Update specific languages only (maintain other language information)","text":"<pre><code>python json2vars_setter/cache_version_info.py --template-only --languages python --keep-existing\n</code></pre>"},{"location":"features/version-caching/#fetch-latest-information-from-api-and-create-template","title":"Fetch latest information from API and create template","text":"<pre><code>python json2vars_setter/cache_version_info.py\n</code></pre>"},{"location":"features/version-caching/#cache-many-versions-but-limit-output-to-most-recent-ones","title":"Cache many versions but limit output to most recent ones","text":"<pre><code>python json2vars_setter/cache_version_info.py --count 10 --output-count 3\n</code></pre>"},{"location":"features/version-caching/#cache-creation-and-management","title":"Cache Creation and Management","text":""},{"location":"features/version-caching/#force-fetch-latest-information","title":"Force fetch latest information","text":"<pre><code>python json2vars_setter/cache_version_info.py --force\n</code></pre>"},{"location":"features/version-caching/#update-only-after-a-certain-period-eg-7-days","title":"Update only after a certain period (e.g., 7 days)","text":"<pre><code>python json2vars_setter/cache_version_info.py --max-age 7\n</code></pre>"},{"location":"features/version-caching/#accumulate-version-history-add-new-versions","title":"Accumulate version history (add new versions)","text":"<pre><code>python json2vars_setter/cache_version_info.py --incremental --count 30\n</code></pre>"},{"location":"features/version-caching/#advanced-usage","title":"Advanced Usage","text":""},{"location":"features/version-caching/#custom-file-specification","title":"Custom File Specification","text":""},{"location":"features/version-caching/#output-to-specific-file","title":"Output to specific file","text":""},{"location":"features/version-caching/#write-support-language-version-pythonnodejsrubygorust","title":"Write support language version (python,nodejs,ruby,go,rust)","text":"<pre><code>python json2vars_setter/cache_version_info.py --template-file ./your_project_matrix.json\n</code></pre>"},{"location":"features/version-caching/#write-specified-support-language-version-pythonnodejs","title":"Write specified support language version (python,nodejs)","text":"<pre><code>python json2vars_setter/cache_version_info.py --lang python nodejs --template-file ./your_project_matrix.json\n</code></pre>"},{"location":"features/version-caching/#write-specified-support-language-version-python","title":"Write specified support language version (python)","text":"<pre><code>python json2vars_setter/cache_version_info.py --lang python --template-file ./your_python_matrix.json\n</code></pre>"},{"location":"features/version-caching/#maintain-existing-file-structure","title":"Maintain existing file structure","text":"<pre><code>python json2vars_setter/cache_version_info.py --existing-template ./project_matrix.json --template-file ./updated_matrix.json\n</code></pre>"},{"location":"features/version-caching/#version-control-flexibility","title":"Version Control Flexibility","text":""},{"location":"features/version-caching/#cache-complete-history-but-test-only-latest-versions","title":"Cache complete history but test only latest versions","text":"<pre><code>python json2vars_setter/cache_version_info.py --count 15 --output-count 3\n</code></pre>"},{"location":"features/version-caching/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"features/version-caching/#scheduled-job-cache-update-only","title":"Scheduled job (cache update only)","text":"<pre><code>python json2vars_setter/cache_version_info.py --max-age 7 --cache-only\n</code></pre>"},{"location":"features/version-caching/#pre-build-processing-template-generation-only","title":"Pre-build processing (template generation only)","text":"<pre><code>python json2vars_setter/cache_version_info.py --template-only\n</code></pre>"},{"location":"features/version-caching/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>In GitHub Actions, these options are mapped to action inputs:</p> <pre><code>- name: Set variables with cached versions\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-languages: 'python,nodejs'\n    cache-max-age: '7'\n    cache-count: '10'\n    output-count: '3'  # Cache 10 versions but only use 3 in matrix\n    keep-existing: 'true'\n    sort-order: 'desc'\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>Note that the version caching strategy (<code>use-cache: 'true'</code>) and dynamic update strategy (<code>update-matrix: 'true'</code>) cannot be used together as they represent different approaches to managing version information.</p>"},{"location":"features/version-caching/#how-it-works","title":"How It Works","text":"<p>When you set <code>use-cache: 'true'</code>, the action performs these steps internally:</p> <ol> <li>Check Cache Freshness: The manager checks if the cache is fresh based on <code>cache-max-age</code></li> <li>Fetch Version Info: If needed, it fetches new version information from APIs for the specified languages</li> <li>Update Cache: It updates the cache file with the new information</li> <li>Generate Template: It creates or updates the matrix JSON file based on the cached data, respecting version limits<ul> <li>If <code>output-count</code> is specified, only that many versions are included in the template</li> <li>Otherwise, <code>cache-count</code> versions are included</li> </ul> </li> <li>Parse JSON: The matrix JSON file is processed by json_to_github_output.py</li> <li>Set Outputs: The values from the JSON file are set as GitHub Actions outputs</li> </ol> <pre><code>sequenceDiagram\n    participant Workflow as GitHub Workflow\n    participant Action as json2vars-setter\n    participant CacheMgr as cache_version_info.py\n    participant Parser as json_to_github_output.py\n    participant API as Language APIs\n    participant Cache as version_cache.json\n    participant File as matrix.json\n\n    Workflow-&gt;&gt;Action: Run with use-cache: 'true'\n    Action-&gt;&gt;CacheMgr: Execute with options\n\n    alt Cache needs updating\n        CacheMgr-&gt;&gt;Cache: Check freshness\n        CacheMgr-&gt;&gt;API: Fetch version info\n        API-&gt;&gt;CacheMgr: Return versions\n        CacheMgr-&gt;&gt;Cache: Update cache\n    else Cache is fresh or template-only\n        CacheMgr-&gt;&gt;Cache: Read cached data\n    end\n\n    CacheMgr-&gt;&gt;File: Generate/update matrix file\n    CacheMgr-&gt;&gt;Action: Return control\n    Action-&gt;&gt;Parser: Execute with matrix JSON\n    Parser-&gt;&gt;File: Read JSON\n    Parser-&gt;&gt;Workflow: Set GitHub outputs</code></pre>"},{"location":"features/version-caching/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>use-cache: 'true'</code> with <code>cache-max-age</code> to avoid unnecessary API calls while keeping versions updated</li> <li>Use template-only mode (<code>template-only: 'true'</code>) for quick template generation from existing cache</li> <li>Use incremental mode (<code>cache-incremental: 'true'</code>) with <code>cache-count</code> to build comprehensive version history</li> <li>Use <code>keep-existing: 'true'</code> when updating only specific languages to maintain existing configuration</li> <li>Use <code>output-count</code> to limit the number of versions in your matrix while maintaining a larger history in cache</li> <li>Set up a scheduled job for cache maintenance and a separate job for template generation</li> <li>Never use <code>use-cache: 'true'</code> and <code>update-matrix: 'true'</code> together as they are mutually exclusive approaches</li> </ul>"},{"location":"features/version-caching/#github-api-authentication","title":"GitHub API Authentication","text":"<p>When fetching version information from GitHub APIs, you might encounter rate limits, especially in CI/CD environments where many workflows run frequently.</p> <p>Avoiding API Rate Limits</p> <p>To increase your API rate limits, add the <code>GITHUB_TOKEN</code> as an environment variable:</p> <pre><code>- name: Set variables with cached versions\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-languages: 'python,nodejs'\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>This allows the action to authenticate with GitHub, significantly increasing your API rate limits.</p> <p>API Rate Limit Issues</p> <p>If you encounter <code>API rate limit exceeded</code> errors, refer to the Troubleshooting Guide for more detailed solutions.</p>"},{"location":"features/version-caching/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Solution API rate limits Use GitHub authentication by setting up the <code>GITHUB_TOKEN</code> environment variable Missing versions Increase the <code>cache-count</code> value to fetch more versions Too many versions in matrix Use <code>output-count</code> to limit matrix versions while keeping more in cache Incorrect sort order Explicitly set <code>sort-order: 'asc'</code> or <code>sort-order: 'desc'</code> as needed Cache not updating Use <code>force-cache-update: 'true'</code> to force an update Empty template Check that the cache file exists or use <code>force-cache-update: 'true'</code> to create it"},{"location":"features/version-caching/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to dynamically update your matrix configurations</li> <li>See basic examples for simple cache usage patterns</li> <li>Review the command options reference for all available options</li> </ul>"},{"location":"reference/options/","title":"Command Options Reference","text":"<p>This page provides a comprehensive reference for all configuration options available in the JSON to Variables Setter action.</p>"},{"location":"reference/options/#input-parameters","title":"Input Parameters","text":""},{"location":"reference/options/#basic-settings","title":"Basic Settings","text":"Parameter Description Required Default Notes <code>json-file</code> Path to the JSON file \u2713 <code>.github/json2vars-setter/matrix.json</code> The JSON file containing matrix configuration"},{"location":"reference/options/#dynamic-update-options","title":"Dynamic Update Options","text":"Parameter Description Required Default Notes <code>update-matrix</code> Whether to dynamically update the matrix before parsing \u2717 <code>false</code> Enables the dynamic update feature <code>update-strategy</code> Default update strategy for all languages \u2717 - Valid values: <code>stable</code>, <code>latest</code>, <code>both</code> <code>python-strategy</code> Update strategy for Python versions \u2717 - Same valid values as <code>update-strategy</code> <code>nodejs-strategy</code> Update strategy for Node.js versions \u2717 - Same valid values as <code>update-strategy</code> <code>ruby-strategy</code> Update strategy for Ruby versions \u2717 - Same valid values as <code>update-strategy</code> <code>go-strategy</code> Update strategy for Go versions \u2717 - Same valid values as <code>update-strategy</code> <code>rust-strategy</code> Update strategy for Rust versions \u2717 - Same valid values as <code>update-strategy</code> <code>dry-run</code> Run in dry-run mode without updating the JSON file \u2717 <code>false</code> For testing update strategies"},{"location":"reference/options/#cache-version-options","title":"Cache Version Options","text":"Parameter Description Required Default Notes <code>use-cache</code> Whether to use cached version information \u2717 <code>false</code> Enables the version caching feature <code>cache-languages</code> Languages to include in cache operations \u2717 <code>all</code> Comma-separated list (e.g., <code>python,nodejs</code>) <code>force-cache-update</code> Force cache update even if it is fresh \u2717 <code>false</code> Bypasses freshness checks <code>cache-max-age</code> Maximum age of cache in days before update \u2717 <code>1</code> How old the cache can be before refresh <code>cache-count</code> Number of versions to fetch per language \u2717 <code>10</code> Controls how many versions to retrieve and store in cache <code>output-count</code> Number of versions to include in output template \u2717 <code>0</code> When 0 or not specified, uses the value of <code>cache-count</code>. Allows caching many versions but limiting how many appear in matrix.json <code>cache-incremental</code> Add only new versions without replacing existing cache \u2717 <code>false</code> Build a version history over time <code>cache-file</code> Custom cache file path \u2717 <code>.github/json2vars-setter/cache/version_cache.json</code> Where to store cache data <code>template-only</code> Only generate template from existing cache (no API calls) \u2717 <code>false</code> Skip updating cache, just use existing data <code>cache-only</code> Only update the cache, do not generate the template \u2717 <code>false</code> Update cache but don't modify JSON file <code>keep-existing</code> Maintain existing version information when generating template \u2717 <code>true</code> Preserves information for unspecified languages <code>sort-order</code> Version sort order \u2717 <code>desc</code> Valid values: <code>desc</code> (newest first), <code>asc</code> (oldest first)"},{"location":"reference/options/#output-variables","title":"Output Variables","text":"Variable Description Example <code>os</code> List of operating systems <code>[\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]</code> <code>versions_python</code> List of Python versions <code>[\"3.10\", \"3.11\", \"3.12\"]</code> <code>versions_ruby</code> List of Ruby versions <code>[\"3.0\", \"3.1\", \"3.2\"]</code> <code>versions_nodejs</code> List of Node.js versions <code>[\"16\", \"18\", \"20\"]</code> <code>versions_go</code> List of Go versions <code>[\"1.19\", \"1.20\", \"1.21\"]</code> <code>versions_rust</code> List of Rust versions <code>[\"1.70.0\", \"1.71.0\", \"stable\"]</code> <code>ghpages_branch</code> GitHub Pages branch name <code>\"gh-pages\"</code>"},{"location":"reference/options/#usage-notes","title":"Usage Notes","text":""},{"location":"reference/options/#strategy-types","title":"Strategy Types","text":"<p>The dynamic update feature supports three different strategies:</p> <ul> <li><code>stable</code>: Include only stable versions (recommended for production)</li> <li><code>latest</code>: Include only the latest versions, including pre-releases (for testing cutting-edge features)</li> <li><code>both</code>: Include both stable and latest versions (for maximum compatibility testing)</li> </ul>"},{"location":"reference/options/#input-relationships-and-constraints","title":"Input Relationships and Constraints","text":"<p>Some input parameters have relationships or constraints:</p> <ol> <li> <p>Mutually Exclusive Strategies:</p> <ul> <li><code>update-matrix: 'true'</code> and <code>use-cache: 'true'</code> cannot be used together</li> <li>If both are specified, <code>update-matrix</code> takes precedence</li> </ul> </li> <li> <p>Strategy Hierarchy:</p> <ul> <li>If <code>update-strategy</code> is specified, it applies to all languages</li> <li>Language-specific strategies (e.g., <code>python-strategy</code>) override the global strategy</li> </ul> </li> <li> <p>Cache-Related Dependencies:</p> <ul> <li><code>template-only</code> requires an existing cache file</li> <li><code>force-cache-update</code> is only relevant when <code>use-cache: 'true'</code></li> <li><code>cache-incremental</code> works best with a higher <code>cache-count</code> value</li> </ul> </li> </ol>"},{"location":"reference/options/#example-usage","title":"Example Usage","text":""},{"location":"reference/options/#dynamic-update-strategy","title":"Dynamic Update Strategy","text":"<pre><code>- name: Set variables with dynamic update\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    update-matrix: 'true'\n    python-strategy: 'stable'\n    nodejs-strategy: 'latest'\n</code></pre>"},{"location":"reference/options/#caching-strategy","title":"Caching Strategy","text":"<pre><code>- name: Set variables with caching\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n    use-cache: 'true'\n    cache-max-age: '7'\n    cache-languages: 'python,nodejs'\n    keep-existing: 'true'\n</code></pre>"},{"location":"reference/options/#basic-usage-no-updates","title":"Basic Usage (No Updates)","text":"<pre><code>- name: Set variables from static JSON\n  id: json2vars\n  uses: 7rikazhexde/json2vars-setter@v1.0.1\n  with:\n    json-file: .github/json2vars-setter/sample/matrix.json\n</code></pre>"},{"location":"reference/options/#best-practices","title":"Best Practices","text":"<ul> <li>Always set an <code>id</code> for the step to reference the outputs</li> <li>Use caching with <code>cache-max-age</code> to reduce API calls in frequently run workflows</li> <li>Use <code>dry-run: 'true'</code> to test update strategies before applying them</li> <li>Set up <code>GITHUB_TOKEN</code> environment variable to avoid API rate limits</li> <li>For scheduled updates, use a dedicated job that commits changes to the repository</li> </ul>"},{"location":"reference/options/#error-handling","title":"Error Handling","text":"<p>Common error scenarios and how to handle them:</p> <ul> <li>API Rate Limits: Add <code>env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}</code> to your step</li> <li>Missing Outputs: Check if you've specified the correct <code>id</code> and using the outputs correctly</li> <li>Cache File Errors: Ensure the cache directory exists; use <code>force-cache-update: 'true'</code> to reset</li> </ul> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"reference/options/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about basic usage</li> <li>See CI/CD integration examples</li> <li>Check troubleshooting tips</li> </ul>"}]}