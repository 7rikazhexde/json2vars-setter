name: Node.js Test

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - 'examples/nodejs/**'
      - '.github/json2vars-setter/nodejs_test.yml'

jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.json2vars.outputs.os }}
      versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}
      ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set variables from JSON
        id: json2vars
        uses: 7rikazhexde/json2vars-setter@v1.0.2
        with:
          json-file: examples/nodejs/nodejs_project_matrix.json

      - name: Debug output values
        run: |
          echo "os: ${{ steps.json2vars.outputs.os }}"
          echo "os[0]: ${{ fromJson(steps.json2vars.outputs.os)[0] }}"
          echo "os[1]: ${{ fromJson(steps.json2vars.outputs.os)[1] }}"
          echo "os[2]: ${{ fromJson(steps.json2vars.outputs.os)[2] }}"
          echo "versions_nodejs: ${{ steps.json2vars.outputs.versions_nodejs }}"
          echo "versions_nodejs[0]: ${{ fromJson(steps.json2vars.outputs.versions_nodejs)[0] }}"
          echo "versions_nodejs[1]: ${{ fromJson(steps.json2vars.outputs.versions_nodejs)[1] }}"
          echo "versions_nodejs[2]: ${{ fromJson(steps.json2vars.outputs.versions_nodejs)[2] }}"
          echo "versions_nodejs[3]: ${{ fromJson(steps.json2vars.outputs.versions_nodejs)[3] }}"
          echo "versions_nodejs[4]: ${{ fromJson(steps.json2vars.outputs.versions_nodejs)[4] }}"
          echo "ghpages_branch: ${{ steps.json2vars.outputs.ghpages_branch }}"

  run_tests:
    needs: set_variables
    strategy:
      matrix:
        os: ${{ fromJson(needs.set_variables.outputs.os) }}
        node-version: ${{ fromJson(needs.set_variables.outputs.versions_nodejs) }}
    runs-on: ${{ matrix.os }}
    outputs:
      test_status: ${{ steps.set_status.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v6.0.0
        with:
          node-version: ${{ matrix.node-version }}
          # Enable caching of npm dependencies
          cache: 'npm'
          cache-dependency-path: './examples/nodejs/package-lock.json'

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Display Node.js version
        run: |
          node --version
          npm --version

      - name: Install dependencies
        working-directory: ./examples/nodejs
        run: npm ci

      - name: Show matrix
        shell: bash
        run: |
          # For non-list case
          ghpages_branch="${{ needs.set_variables.outputs.ghpages_branch }}"

          # For list case, explicitly enclose the list in "" to make it a string. (Note that it is not ''.)
          os='${{ needs.set_variables.outputs.os }}'
          versions_nodejs='${{ needs.set_variables.outputs.versions_nodejs }}'

          # For list index case
          os_0="${{ fromJson(needs.set_variables.outputs.os)[0] }}"
          os_1="${{ fromJson(needs.set_variables.outputs.os)[1] }}"
          os_2="${{ fromJson(needs.set_variables.outputs.os)[2] }}"

          versions_nodejs_0="${{ fromJson(needs.set_variables.outputs.versions_nodejs)[0] }}"
          versions_nodejs_1="${{ fromJson(needs.set_variables.outputs.versions_nodejs)[1] }}"
          versions_nodejs_2="${{ fromJson(needs.set_variables.outputs.versions_nodejs)[2] }}"
          versions_nodejs_3="${{ fromJson(needs.set_variables.outputs.versions_nodejs)[3] }}"
          versions_nodejs_4="${{ fromJson(needs.set_variables.outputs.versions_nodejs)[4] }}"

          echo "os: ${os}"
          echo "os_0: ${os_0}"
          echo "os_1: ${os_1}"
          echo "os_2: ${os_2}"
          echo "versions_nodejs: ${versions_nodejs}"
          echo "versions_nodejs_0: ${versions_nodejs_0}"
          echo "versions_nodejs_1: ${versions_nodejs_1}"
          echo "versions_nodejs_2: ${versions_nodejs_2}"
          echo "versions_nodejs_3: ${versions_nodejs_3}"
          echo "versions_nodejs_4: ${versions_nodejs_4}"
          echo "ghpages_branch: ${ghpages_branch}"

          # For loop case
          os_list=$(echo "${os}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')
          nodejs_versions_list=$(echo "${versions_nodejs}" | jq -r '.[]' | tr '\n' ' ' | sed 's/ $//')

          for current_os in ${os_list}; do
            for version in ${nodejs_versions_list}; do
              echo "Current OS: ${current_os}, Current Node.js Version: ${version}"
            done
          done

      - name: Run tests
        id: npm_test
        working-directory: ./examples/nodejs
        continue-on-error: true
        shell: bash
        run: |
          output="$(npm test)"
          echo "${output}"

      - name: Set test status
        id: set_status
        if: always()
        shell: bash
        run: |
          if [ "${{ job.status }}" == "cancelled" ]; then
            echo "status=cancelled" >> "$GITHUB_OUTPUT"
          elif [ "${{ job.status }}" == "skipped" ]; then
            echo "status=skipped" >> "$GITHUB_OUTPUT"
          elif [ "${{ steps.npm_test.outcome }}" == "failure" ]; then
            echo "status=failing" >> "$GITHUB_OUTPUT"
          elif [ "${{ steps.npm_test.outcome }}" == "success" ]; then
            echo "status=passing" >> "$GITHUB_OUTPUT"
          else
            echo "status=pending" >> "$GITHUB_OUTPUT"
          fi

  update_badge:
    needs: run_tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Set color
        id: set_color
        shell: bash
        run: |
          status="${{ needs.run_tests.outputs.test_status }}"
          if [ "$status" == "passing" ]; then
            echo "color=2ea44f" >> "$GITHUB_OUTPUT"
          elif [ "$status" == "failing" ]; then
            echo "color=cf222e" >> "$GITHUB_OUTPUT"
          elif [ "$status" == "pending" ]; then
            echo "color=dbab09" >> "$GITHUB_OUTPUT"
          else
            echo "color=808080" >> "$GITHUB_OUTPUT"
          fi

      - name: Create badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 11f46ff9ef47d3362dabe767255b0d9e
          filename: nodejs-test-badge.json
          label: Node.js Test
          message: ${{ needs.run_tests.outputs.test_status }}
          color: ${{ steps.set_color.outputs.color }}
          labelColor: "24292f"
          style: "flat"
          namedLogo: "github"
          logoColor: "white"
