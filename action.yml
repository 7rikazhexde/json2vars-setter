name: 'JSON to Variables Setter'
description: 'Parse JSON file and set GitHub Actions outputs'
author: '7rikazhexde'
branding:
  icon: 'file'
  color: 'green'
inputs:
  # Basic Settings
  json-file:
    description: 'Path to the JSON file'
    required: true
    default: '.github/json2vars-setter/matrix.json'

  # Dynamic Update Option
  update-matrix:
    description: 'Whether to dynamically update the matrix before parsing'
    required: false
    default: 'false'  # Default is to disable dynamic update

  # Update Strategy Option
  update-strategy:
    description: 'Default update strategy for all languages (stable, latest, or both)'
    required: false  # Optional

  # Language-specific Update Strategies
  python-strategy:
    description: 'Update strategy for Python versions (stable, latest, or both)'
    required: false  # Optional
  nodejs-strategy:
    description: 'Update strategy for Node.js versions (stable, latest, or both)'
    required: false  # Optional
  ruby-strategy:
    description: 'Update strategy for Ruby versions (stable, latest, or both)'
    required: false  # Optional
  go-strategy:
    description: 'Update strategy for Go versions (stable, latest, or both)'
    required: false  # Optional
  rust-strategy:
    description: 'Update strategy for Rust versions (stable, latest, or both)'
    required: false  # Optional

  # Safe Mode
  dry-run:
    description: 'Run in dry-run mode without updating the JSON file'
    required: false
    default: 'false'  # Default is to actually update

  # Cache Version Info Options
  use-cache:
    description: 'Whether to use cached version information'
    required: false
    default: 'false'  # Default is to not use caching

  cache-languages:
    description: 'Languages to include in cache operations (comma-separated)'
    required: false
    default: 'all'  # Default is all languages

  force-cache-update:
    description: 'Force cache update even if it is fresh'
    required: false
    default: 'false'

  cache-max-age:
    description: 'Maximum age of cache in days before update'
    required: false
    default: '1'

  cache-count:
    description: 'Number of versions to fetch per language'
    required: false
    default: '10'

  output-count:
    description: 'Number of versions to include in output template. This allows you to cache many versions but limit how many appear in the final matrix.json. When not specified, defaults to using the same value as cache-count.'
    required: false
    default: '0'

  cache-incremental:
    description: 'Add only new versions without replacing existing cache'
    required: false
    default: 'false'

  cache-file:
    description: 'Custom cache file path'
    required: false
    default: '.github/json2vars-setter/cache/version_cache.json'

  template-only:
    description: 'Only generate template from existing cache (no API calls)'
    required: false
    default: 'false'

  cache-only:
    description: 'Only update the cache, do not generate the template'
    required: false
    default: 'false'

  keep-existing:
    description: 'Maintain existing version information when generating template'
    required: false
    default: 'true'

  sort-order:
    description: 'Version sort order (desc: newest first, asc: oldest first)'
    required: false
    default: 'desc'

outputs:
  # Output Variables
  os:
    description: 'List of operating systems'
    value: ${{ steps.set_outputs.outputs.os }}
  versions_python:
    description: 'List of Python versions'
    value: ${{ steps.set_outputs.outputs.versions_python }}
  versions_ruby:
    description: 'List of Ruby versions'
    value: ${{ steps.set_outputs.outputs.versions_ruby }}
  versions_nodejs:
    description: 'List of Node.js versions'
    value: ${{ steps.set_outputs.outputs.versions_nodejs }}
  versions_go:
    description: 'List of Golang versions'
    value: ${{ steps.set_outputs.outputs.versions_go }}
  versions_rust:
    description: 'List of Rust versions'
    value: ${{ steps.set_outputs.outputs.versions_rust }}
  ghpages_branch:
    description: 'GitHub Pages branch'
    value: ${{ steps.set_outputs.outputs.ghpages_branch }}

runs:
  using: "composite"
  steps:
    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v6.0.0
      with:
        python-version: '3.13'

    # Get Python version and set as output
    - name: Get Python version
      id: get-python-version
      run: |
        python_version=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')")
        echo "python-version=$python_version" >> $GITHUB_OUTPUT
      shell: bash

    # Setup Poetry using pip (simple and reliable method)
    - name: Setup Poetry for Action
      shell: bash
      run: |
        echo "Installing Poetry using pip..."

        # Install Poetry using pip (most reliable method)
        python3 -m pip install --upgrade pip
        python3 -m pip install poetry

        # Configure Poetry for this action's isolated environment
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ${{ github.action_path }}/json2vars-venv
        poetry config installer.parallel true

        # Verify installation
        poetry --version
        echo "âœ… Poetry setup completed"

    # Cache the action-specific dependencies
    - name: Cache Poetry dependencies for Action
      uses: actions/cache@v4.2.2
      id: poetry-cache
      with:
        path: |
          ${{ github.action_path }}/json2vars-venv
          ~/.cache/pypoetry/action-cache
        key: ${{ runner.os }}-json2vars-action-py${{ steps.get-python-version.outputs.python-version }}-${{ hashFiles('${{ github.action_path }}/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-json2vars-action-py${{ steps.get-python-version.outputs.python-version }}-
          ${{ runner.os }}-json2vars-action-

    # Install dependencies if cache doesn't exist - with isolated environment
    - name: Install dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd ${{ github.action_path }}
        # Set up a Poetry configuration for this action only
        poetry config virtualenvs.path ${{ github.action_path }}/json2vars-venv
        poetry config cache-dir ~/.cache/pypoetry/action-cache
        # Install dependencies
        poetry install --only main --no-interaction --no-root

    # Dynamic matrix update (highest priority)
    - name: Update matrix if requested
      if: ${{ inputs.update-matrix == 'true' }}
      shell: bash
      run: |
        echo "Dynamically updating matrix..."
        ARGS=()

        # Use absolute path for JSON file
        JSON_ABSOLUTE_PATH="${{ github.workspace }}/${{ inputs.json-file }}"
        ARGS+=("--json-file" "${JSON_ABSOLUTE_PATH}")

        echo "JSON file path: ${JSON_ABSOLUTE_PATH}"

        # Check if file exists
        if [ ! -f "${JSON_ABSOLUTE_PATH}" ]; then
          echo "ERROR: Required JSON file not found at ${JSON_ABSOLUTE_PATH}"
          exit 1
        fi

        # Apply common strategy to all languages if specified
        if [[ -n "${{ inputs.update-strategy }}" ]]; then
          ARGS+=("--all" "${{ inputs.update-strategy }}")
        else
          # Apply individual strategies for each language if specified
          if [[ -n "${{ inputs.python-strategy }}" ]]; then
            ARGS+=("--python" "${{ inputs.python-strategy }}")
          fi
          if [[ -n "${{ inputs.nodejs-strategy }}" ]]; then
            ARGS+=("--nodejs" "${{ inputs.nodejs-strategy }}")
          fi
          if [[ -n "${{ inputs.ruby-strategy }}" ]]; then
            ARGS+=("--ruby" "${{ inputs.ruby-strategy }}")
          fi
          if [[ -n "${{ inputs.go-strategy }}" ]]; then
            ARGS+=("--go" "${{ inputs.go-strategy }}")
          fi
          if [[ -n "${{ inputs.rust-strategy }}" ]]; then
            ARGS+=("--rust" "${{ inputs.rust-strategy }}")
          fi
        fi

        # Set dry-run flag
        if [[ "${{ inputs.dry-run }}" == "true" ]]; then
          ARGS+=("--dry-run")
        fi

        # Enable verbose logging
        ARGS+=("--verbose")

        # Execute update script using Poetry with isolated environment
        cd ${{ github.action_path }}
        poetry run python -m json2vars_setter.update_matrix_dynamic "${ARGS[@]}"

    # Cache version info update (medium priority)
    - name: Update using cache version info if requested
      if: ${{ inputs.update-matrix != 'true' && inputs.use-cache == 'true' }}
      shell: bash
      run: |
        echo "Using cached version information..."
        ARGS=()

        # Parse languages list
        IFS=',' read -ra LANGS <<< "${{ inputs.cache-languages }}"
        if [[ "${LANGS[*]}" != "all" ]]; then
          ARGS+=("--languages" "${LANGS[@]}")
        fi

        # Add cache configuration options
        if [[ "${{ inputs.force-cache-update }}" == "true" ]]; then
          ARGS+=("--force")
        fi

        ARGS+=("--max-age" "${{ inputs.cache-max-age }}")
        ARGS+=("--count" "${{ inputs.cache-count }}")

        if [[ "${{ inputs.output-count }}" != "0" ]]; then
          ARGS+=("--output-count" "${{ inputs.output-count }}")
        fi

        # Use absolute paths for all file inputs
        CACHE_FILE="${{ github.workspace }}/${{ inputs.cache-file }}"
        JSON_FILE="${{ github.workspace }}/${{ inputs.json-file }}"

        # Check if JSON file exists
        if [ ! -f "${JSON_FILE}" ]; then
          echo "ERROR: Required JSON file not found at ${JSON_FILE}"
          exit 1
        fi

        # Create parent directory for cache file if it doesn't exist
        mkdir -p $(dirname "${CACHE_FILE}")

        ARGS+=("--cache-file" "${CACHE_FILE}")
        ARGS+=("--template-file" "${JSON_FILE}")

        if [[ "${{ inputs.template-only }}" == "true" ]]; then
          ARGS+=("--template-only")
        fi

        if [[ "${{ inputs.cache-only }}" == "true" ]]; then
          ARGS+=("--cache-only")
        fi

        if [[ "${{ inputs.cache-incremental }}" == "true" ]]; then
          ARGS+=("--incremental")
        fi

        if [[ "${{ inputs.keep-existing }}" == "true" ]]; then
          ARGS+=("--keep-existing")
        fi

        ARGS+=("--sort" "${{ inputs.sort-order }}")

        # Enable verbose logging
        ARGS+=("--verbose")

        # Output the full command for debugging
        echo "Running command: poetry run python -m json2vars_setter.cache_version_info with files:"
        echo "  Cache file: ${CACHE_FILE}"
        echo "  Template file: ${JSON_FILE}"

        # Execute cache version info script using Poetry with isolated environment
        cd ${{ github.action_path }}
        poetry run python -m json2vars_setter.cache_version_info "${ARGS[@]}"

    # JSON parsing (always executed)
    - name: Parse JSON and set outputs
      id: set_outputs
      shell: bash
      run: |
        # Define JSON file path with absolute path
        JSON_ABSOLUTE_PATH="${{ github.workspace }}/${{ inputs.json-file }}"
        echo "Processing JSON file: ${JSON_ABSOLUTE_PATH}"

        # Verify that the file exists
        if [ ! -f "${JSON_ABSOLUTE_PATH}" ]; then
          echo "ERROR: Required JSON file not found at ${JSON_ABSOLUTE_PATH}"
          exit 1
        fi

        # Execute script from action directory with isolated environment
        cd ${{ github.action_path }}
        poetry run python -m json2vars_setter.json_to_github_output "${JSON_ABSOLUTE_PATH}"
      env:
        GITHUB_OUTPUT: $GITHUB_OUTPUT

    # Output debug information
    - name: Debug Output Values
      shell: bash
      run: |
        echo "Debug: Checking output values"
        echo "OS: ${{ steps.set_outputs.outputs.os }}"
        echo "Python Versions: ${{ steps.set_outputs.outputs.versions_python }}"
        echo "Ruby Versions: ${{ steps.set_outputs.outputs.versions_ruby }}"
        echo "Node.js Versions: ${{ steps.set_outputs.outputs.versions_nodejs }}"
        echo "Go Versions: ${{ steps.set_outputs.outputs.versions_go }}"
        echo "Rust Versions: ${{ steps.set_outputs.outputs.versions_rust }}"
        echo "GitHub Pages Branch: ${{ steps.set_outputs.outputs.ghpages_branch }}"
